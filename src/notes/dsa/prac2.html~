<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>&lrm;</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
</head>
<body>
<div id="content" class="content">
<ol class="org-ol">
<li><p>
<b>Aim</b>: Sort elements of an array using the Bubble Sort algorithm.
</p>

<div class="org-src-container">
<pre class="src src-C"><span class="org-preprocessor">#include</span> <span class="org-string">&lt;stdio.h&gt;</span>

<span class="org-type">void</span> <span class="org-function-name">swap</span>(<span class="org-type">int</span> *<span class="org-variable-name">a</span>, <span class="org-type">int</span> *<span class="org-variable-name">b</span>) {
    <span class="org-type">int</span> <span class="org-variable-name">temp</span> = *a;
    *a = *b;
    *b = temp;
}

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
    <span class="org-type">int</span> <span class="org-variable-name">arr</span>[] = {1,6,3,9,2,0};
    <span class="org-type">int</span> <span class="org-variable-name">size</span> = <span class="org-keyword">sizeof</span>(arr) / <span class="org-keyword">sizeof</span>(<span class="org-type">int</span>);

    printf(<span class="org-string">"Unsorted: "</span>);
    <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">i</span> = 0; i &lt; size; i++) {
        printf(<span class="org-string">"%d "</span>, arr[i]);
    }
    printf(<span class="org-string">"\n"</span>);

    <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">pass</span> = 0; pass &lt; (size); pass++) {
        <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">j</span> = 0; j &lt; (size - 1 - pass); j++) {
            <span class="org-keyword">if</span> (arr[j] &gt; arr[j + 1]) {
                swap(&amp;arr[j], &amp;arr[j + 1]);
            }
        }
    }

    printf(<span class="org-string">"Sorted:   "</span>);
    <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">i</span> = 0; i &lt; (size); i++) {
        printf(<span class="org-string">"%d "</span>, arr[i]);
    }

}
</pre>
</div>

<pre class="example">
Unsorted: 1 6 3 9 2 0
Sorted:   0 1 2 3 6 9
</pre></li>

<li><p>
<b>Aim</b>: Sort elements of an array using the Insertion Sort algorithm.
</p>

<div class="org-src-container">
<pre class="src src-C"><span class="org-preprocessor">#include</span> <span class="org-string">&lt;stdio.h&gt;</span>

<span class="org-type">void</span> <span class="org-function-name">insertion_sort</span>(<span class="org-type">int</span> *<span class="org-variable-name">arr</span>, <span class="org-type">int</span> <span class="org-variable-name">size</span>) {
    <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">i</span> = 1; i &lt; size; ++i) {
        <span class="org-type">int</span> <span class="org-variable-name">value</span> = arr[i];
        <span class="org-type">int</span> <span class="org-variable-name">hole</span> = i;
        <span class="org-keyword">while</span> (hole &gt; 0 &amp;&amp; (arr[hole - 1] &gt; value)) {
            arr[hole] = arr[hole - 1];
            hole = hole - 1;
        }
        arr[hole] = value;
    }
}

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
    <span class="org-type">int</span> <span class="org-variable-name">arr</span>[] = {6, 9, 7, 3, 5, 10, 9};
    <span class="org-type">int</span> <span class="org-variable-name">size</span> = <span class="org-keyword">sizeof</span>(arr) / <span class="org-keyword">sizeof</span>(<span class="org-type">int</span>);

    printf(<span class="org-string">"Unsorted: "</span>);
    <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">i</span> = 0; i &lt; size; i++) {
        printf(<span class="org-string">"%d "</span>, arr[i]);
    }
    printf(<span class="org-string">"\n"</span>);

    insertion_sort(arr, size);

    printf(<span class="org-string">"Sorted:   "</span>);
    <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">i</span> = 0; i &lt; size; i++) {
        printf(<span class="org-string">"%d "</span>, arr[i]);
    }
    printf(<span class="org-string">"\n"</span>);
}
</pre>
</div>

<pre class="example">
Unsorted: 6 9 7 3 5 10 9
Sorted:   3 5 6 7 9 9 10
</pre></li>

<li><p>
<b>Aim</b>: Implement Stack using Arrays.
</p>

<div class="org-src-container">
<pre class="src src-C"><span class="org-preprocessor">#include</span><span class="org-string">&lt;stdio.h&gt;</span>
<span class="org-preprocessor">#include</span><span class="org-string">&lt;stdbool.h&gt;</span>
<span class="org-preprocessor">#include</span><span class="org-string">&lt;stdlib.h&gt;</span>

<span class="org-type">int</span> <span class="org-function-name">push</span>(<span class="org-type">int</span> *<span class="org-variable-name">stack</span>, <span class="org-type">int</span> *<span class="org-variable-name">top</span>, <span class="org-type">int</span> <span class="org-variable-name">n</span>, <span class="org-type">int</span> <span class="org-variable-name">el</span>) {
  <span class="org-keyword">if</span> (*top == n) {
    <span class="org-comment-delimiter">// </span><span class="org-comment">overflow</span>
    <span class="org-keyword">return</span> -1;
  }
  *top = *top + 1;
  stack[*top] = el;
  <span class="org-keyword">return</span> 0;
}

<span class="org-type">int</span> <span class="org-function-name">pop</span>(<span class="org-type">int</span> *<span class="org-variable-name">stack</span>, <span class="org-type">int</span> *<span class="org-variable-name">top</span>) {
  <span class="org-keyword">if</span> (*top &lt; 0) {
    <span class="org-comment-delimiter">// </span><span class="org-comment">underflow</span>
    <span class="org-keyword">return</span> -1;
  }

  <span class="org-type">int</span> <span class="org-variable-name">el</span> = stack[*top];
  *top = *top - 1;
  <span class="org-keyword">return</span> el;
}

<span class="org-type">void</span> <span class="org-function-name">display</span>(<span class="org-type">int</span> *<span class="org-variable-name">stack</span>, <span class="org-type">int</span> <span class="org-variable-name">top</span>) {
  printf(<span class="org-string">"========================\n"</span>);
  printf(<span class="org-string">"Stack: \n"</span>);
  <span class="org-keyword">while</span>(top &gt;= 0) {
    printf(<span class="org-string">"%d\n"</span>, stack[top]);
    top--;
  }
  printf(<span class="org-string">"========================\n"</span>);
}

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
  <span class="org-type">int</span> <span class="org-variable-name">top</span> = -1;
  <span class="org-type">int</span> <span class="org-variable-name">n</span> = 100;
  <span class="org-type">int</span> <span class="org-variable-name">stack</span>[n];

  <span class="org-keyword">while</span>(<span class="org-constant">true</span>) {
    printf(<span class="org-string">"Enter choice: \n"</span>);
    printf(<span class="org-string">"1. Push element in stack\n"</span>);
    printf(<span class="org-string">"2. Pop element in stack\n"</span>);
    printf(<span class="org-string">"3. Display stack\n"</span>);
    printf(<span class="org-string">"4. Exit\n"</span>);

    <span class="org-type">int</span> <span class="org-variable-name">option</span>;
    scanf(<span class="org-string">"%d"</span>, &amp;option);

    <span class="org-keyword">switch</span>(option) {
      <span class="org-keyword">case</span> 1: {
        <span class="org-type">int</span> <span class="org-variable-name">el</span>;
        printf(<span class="org-string">"Enter element to push: "</span>);
        scanf(<span class="org-string">"%d"</span>, &amp;el);
        <span class="org-type">int</span> <span class="org-variable-name">st</span> = push(stack, &amp;top, n, el);

        <span class="org-keyword">if</span> (st == -1) {
          printf(<span class="org-string">"failed to push element in stack (overflow)\n"</span>);
        }
        <span class="org-keyword">break</span>;
      }

      <span class="org-keyword">case</span> 2: {
        <span class="org-type">int</span> <span class="org-variable-name">st</span> = pop(stack, &amp;top);
        <span class="org-keyword">if</span> (st == -1) {
          printf(<span class="org-string">"failed to pop element from stack (underflow)\n"</span>);
        }
        <span class="org-keyword">break</span>;
      }

      <span class="org-keyword">case</span> 3:
        display(stack, top);
        <span class="org-keyword">break</span>;

      <span class="org-keyword">case</span> 4:
        exit(0);
        <span class="org-keyword">break</span>;

      <span class="org-keyword">default</span>:
        exit(0);
        <span class="org-keyword">break</span>;
    }
  }
}
</pre>
</div>


<div id="org3c62a68" class="figure">
<p><img src="./stack_using_pointers.png" alt="stack_using_pointers.png" />
</p>
</div></li>
</ol>
</div>
</body>
</html>
