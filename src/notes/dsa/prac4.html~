<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2022-11-30 Wed 12:16 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>&lrm;</title>
<meta name="author" content="siddhant" />
<meta name="generator" content="Org Mode" />
<style>
  #content { max-width: 60em; margin: auto; }
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #e6e6e6;
    border-radius: 3px;
    background-color: #f2f2f2;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
  }
  pre.src:before {
    display: none;
    position: absolute;
    top: -8px;
    right: 12px;
    padding: 3px;
    color: #555;
    background-color: #f2f2f299;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-authinfo::before { content: 'Authinfo'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { }
</style>
</head>
<body>
<div id="content" class="content">
<ol class="org-ol">
<li><p>
<b>Aim</b>: Perform Binary Search using recursion.
</p>

<div class="org-src-container">
<pre class="src src-C"><span class="org-preprocessor">#include</span> <span class="org-string">&lt;stdio.h&gt;</span>

<span class="org-type">int</span> <span class="org-function-name">binary_search</span>(<span class="org-type">int</span> *<span class="org-variable-name">arr</span>, <span class="org-type">int</span> <span class="org-variable-name">left</span>, <span class="org-type">int</span> <span class="org-variable-name">right</span>, <span class="org-type">int</span> <span class="org-variable-name">target</span>) {
    <span class="org-keyword">if</span> (left &gt; right) {
        <span class="org-keyword">return</span> -1;
    }

    <span class="org-type">int</span> <span class="org-variable-name">mid</span> = (left + right) / 2;

    <span class="org-keyword">if</span> (arr[mid] == target) {
        <span class="org-keyword">return</span> mid;
    } <span class="org-keyword">else</span> <span class="org-keyword">if</span> (target &gt; arr[mid]) {
        <span class="org-keyword">return</span> binary_search(arr, mid + 1, right, target);
    } <span class="org-keyword">else</span> {
        <span class="org-keyword">return</span> binary_search(arr, left, mid - 1, target);
    }
}

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
    <span class="org-type">int</span> <span class="org-variable-name">arr</span>[] = {1, 3, 9, 22, 29};
    <span class="org-type">int</span> <span class="org-variable-name">size</span> = <span class="org-keyword">sizeof</span>(arr) / <span class="org-keyword">sizeof</span>(<span class="org-type">int</span>);

    printf(<span class="org-string">"found 1 at index: %d\n"</span>, binary_search(arr, 0, size - 1, 1));
    printf(<span class="org-string">"found 3 at index: %d\n"</span>, binary_search(arr, 0, size - 1, 3));
    printf(<span class="org-string">"found 9 at index: %d\n"</span>, binary_search(arr, 0, size - 1, 9));
    printf(<span class="org-string">"found 100 at index: %d\n"</span>, binary_search(arr, 0, size - 1, 100));
}
</pre>
</div>

<pre class="example">
found 1 at index: 0
found 3 at index: 1
found 9 at index: 2
found 100 at index: -1
</pre></li>

<li><p>
<b>Aim</b>: Write a program for the selection sort algorithm.
</p>

<div class="org-src-container">
<pre class="src src-C"><span class="org-preprocessor">#include</span> <span class="org-string">&lt;stdio.h&gt;</span>

<span class="org-type">void</span> <span class="org-function-name">swap</span>(<span class="org-type">int</span> *<span class="org-variable-name">a</span>, <span class="org-type">int</span> *<span class="org-variable-name">b</span>) {
    <span class="org-type">int</span> <span class="org-variable-name">temp</span> = *a;
    *a = *b;
    *b = temp;
}

<span class="org-type">void</span> <span class="org-function-name">selection_sort</span>(<span class="org-type">int</span> *<span class="org-variable-name">arr</span>, <span class="org-type">int</span> <span class="org-variable-name">size</span>) {
    <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">i</span> = 0; i &lt; size - 1; ++i) {
        <span class="org-type">int</span> <span class="org-variable-name">min</span> = i;

        <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">j</span> = i + 1; j &lt; size; ++j) {
            <span class="org-keyword">if</span> (arr[j] &lt; arr[min]) {
                min = j;
            }
        }

        <span class="org-keyword">if</span> (min != i) {
            swap(&amp;arr[min], &amp;arr[i]);
        }
    }
}

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
    <span class="org-type">int</span> <span class="org-variable-name">arr</span>[] = {-2, 3, 1, 19, 12, 1, 99, 23, -99};
    <span class="org-type">int</span> <span class="org-variable-name">size</span> = <span class="org-keyword">sizeof</span>(arr) / <span class="org-keyword">sizeof</span>(<span class="org-type">int</span>);

    selection_sort(arr, size);

    <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">i</span> = 0; i &lt; size; ++i) {
        printf(<span class="org-string">"%d "</span>, arr[i]);
    }
    printf(<span class="org-string">"\n"</span>);

    <span class="org-keyword">return</span> 0;
}
</pre>
</div>

<pre class="example">
-99 -2 1 1 3 12 19 23 99 
</pre></li>

<li><p>
<b>Aim</b>: Write a program to perform the following operations on a linked list:
</p>

<ul class="org-ul">
<li>Insert a node at the end.</li>
<li>Insert a node at the beginning.</li>
<li>Insert a node at a given position.</li>
<li>Delete a node at the start.</li>
<li>Delete a node at the end.</li>
<li>Delete a node at a given position.</li>
<li>Merge two linked lists.</li>
<li>Reverse a linked list.</li>
<li>Display the linked list.</li>
</ul>

<div class="org-src-container">
<pre class="src src-C"><span class="org-preprocessor">#include</span><span class="org-string">&lt;stdio.h&gt;</span>
<span class="org-preprocessor">#include</span><span class="org-string">&lt;stdlib.h&gt;</span>
<span class="org-preprocessor">#include</span><span class="org-string">&lt;assert.h&gt;</span>

<span class="org-keyword">struct</span> <span class="org-type">Node</span> {
    <span class="org-type">int</span> <span class="org-variable-name">data</span>;
    <span class="org-keyword">struct</span> <span class="org-type">Node</span> *<span class="org-variable-name">next</span>;
};

<span class="org-keyword">typedef</span> <span class="org-keyword">struct</span> <span class="org-type">Node</span> <span class="org-type">Node</span>;

<span class="org-type">Node</span> *<span class="org-function-name">create</span>(<span class="org-type">int</span> <span class="org-variable-name">val</span>);
<span class="org-type">void</span> <span class="org-function-name">insert_at_end</span>(<span class="org-type">Node</span> *<span class="org-variable-name">head</span>, <span class="org-type">int</span> <span class="org-variable-name">el</span>);
<span class="org-type">void</span> <span class="org-function-name">insert_before_start</span>(<span class="org-type">Node</span> **<span class="org-variable-name">head</span>, <span class="org-type">int</span> <span class="org-variable-name">el</span>);
<span class="org-type">void</span> <span class="org-function-name">insert_after</span>(<span class="org-type">Node</span> *<span class="org-variable-name">ll</span>, <span class="org-type">int</span> <span class="org-variable-name">el</span>);
<span class="org-type">int</span> <span class="org-function-name">insert_at_pos</span>(<span class="org-type">Node</span> *<span class="org-variable-name">head</span>, <span class="org-type">unsigned</span> <span class="org-type">int</span> <span class="org-variable-name">pos</span>, <span class="org-type">int</span> <span class="org-variable-name">el</span>);
<span class="org-type">void</span> <span class="org-function-name">delete_start</span>(<span class="org-type">Node</span> **<span class="org-variable-name">head</span>);
<span class="org-type">void</span> <span class="org-function-name">delete_end</span>(<span class="org-type">Node</span> *<span class="org-variable-name">head</span>);
<span class="org-type">int</span> <span class="org-function-name">delete_pos</span>(<span class="org-type">Node</span> *<span class="org-variable-name">head</span>, <span class="org-type">int</span> <span class="org-variable-name">pos</span>);
<span class="org-type">void</span> <span class="org-function-name">merge</span>(<span class="org-type">Node</span> *<span class="org-variable-name">head</span>, <span class="org-type">Node</span> *<span class="org-variable-name">head2</span>);
<span class="org-type">void</span> <span class="org-function-name">reverse</span>(<span class="org-type">Node</span> **<span class="org-variable-name">head</span>);
<span class="org-type">void</span> <span class="org-function-name">print_ll</span>(<span class="org-type">Node</span> *<span class="org-variable-name">head</span>);

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
    <span class="org-type">Node</span> *<span class="org-variable-name">head</span> = create(1);
    <span class="org-type">Node</span> *<span class="org-variable-name">head2</span> = create(100);

    <span class="org-comment-delimiter">// </span><span class="org-comment">insert</span>
    insert_at_end(head, 2);
    insert_at_end(head, 3);

    insert_before_start(&amp;head, -2);
    insert_before_start(&amp;head, -3);

    <span class="org-comment-delimiter">// </span><span class="org-comment">-3 -2 1 2 3</span>
    insert_after(head-&gt;next-&gt;next-&gt;next-&gt;next, 5);

    insert_at_pos(head, 6, 4);

    printf(<span class="org-string">"linked list: \n"</span>);
    print_ll(head);

    printf(<span class="org-string">"reversed linked list: \n"</span>);
    reverse(&amp;head);
    print_ll(head);

    insert_at_end(head2, 200);
    insert_at_end(head2, 300);
    insert_at_end(head2, 400);
    insert_at_end(head2, 500);

    printf(<span class="org-string">"merged linked list:\n"</span>);
    merge(head, head2);
    print_ll(head);
    printf(<span class="org-string">"==============\n"</span>);


    printf(<span class="org-string">"linked list after deleting some nodes:\n"</span>);
    delete_start(&amp;head);
    delete_end(head);
    delete_pos(head, 3);

    print_ll(head);
}

<span class="org-type">void</span> <span class="org-function-name">delete_start</span>(<span class="org-type">Node</span> **<span class="org-variable-name">head</span>) {
    <span class="org-type">Node</span> *<span class="org-variable-name">temp</span> = *head;
    *head = (*head)-&gt;next;

    free(temp);
}

<span class="org-type">void</span> <span class="org-function-name">delete_end</span>(<span class="org-type">Node</span> *<span class="org-variable-name">head</span>) {
    <span class="org-keyword">while</span>(head-&gt;next-&gt;next != <span class="org-constant">NULL</span>) {
        head = head-&gt;next;
    }

    <span class="org-type">Node</span> *<span class="org-variable-name">temp</span> = head-&gt;next;
    head-&gt;next = <span class="org-constant">NULL</span>;
    free(temp);
}

<span class="org-type">int</span> <span class="org-function-name">delete_pos</span>(<span class="org-type">Node</span> *<span class="org-variable-name">head</span>, <span class="org-type">int</span> <span class="org-variable-name">pos</span>) {
    assert(pos &gt; 1);
    <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">i</span> = 1; i &lt; pos - 1 &amp;&amp; head != <span class="org-constant">NULL</span>; ++i) {
        head = head-&gt;next;
    }

    <span class="org-keyword">if</span> (head == <span class="org-constant">NULL</span>) {
        <span class="org-keyword">return</span> -1;
    }

    <span class="org-type">Node</span> *<span class="org-variable-name">temp</span> = head-&gt;next;
    head-&gt;next = head-&gt;next-&gt;next;
    free(temp);
}

<span class="org-type">void</span> <span class="org-function-name">merge</span>(<span class="org-type">Node</span> *<span class="org-variable-name">head</span>, <span class="org-type">Node</span> *<span class="org-variable-name">head2</span>) {
    <span class="org-keyword">while</span>(head-&gt;next != <span class="org-constant">NULL</span>) {
        head = head-&gt;next;
    }

    head-&gt;next = head2;
}

<span class="org-comment-delimiter">// </span><span class="org-comment">O(n)</span>
<span class="org-type">void</span> <span class="org-function-name">reverse</span>(<span class="org-type">Node</span> **<span class="org-variable-name">head</span>) {
    <span class="org-type">Node</span> *<span class="org-variable-name">curr</span> = *head, *<span class="org-variable-name">next</span> = <span class="org-constant">NULL</span>,  *<span class="org-variable-name">prev</span> = <span class="org-constant">NULL</span>;

    <span class="org-keyword">while</span> (curr != <span class="org-constant">NULL</span>) {
        next = curr-&gt;next;
        curr-&gt;next = prev;
        prev = curr;
        curr = next;
    }

    *head = prev;
}

<span class="org-comment-delimiter">// </span><span class="org-comment">O(n)</span>
<span class="org-type">void</span> <span class="org-function-name">insert_at_end</span>(<span class="org-type">Node</span> *<span class="org-variable-name">head</span>, <span class="org-type">int</span> <span class="org-variable-name">el</span>) {
    assert(head != <span class="org-constant">NULL</span>);

    <span class="org-comment-delimiter">// </span><span class="org-comment">go to the end</span>
    <span class="org-keyword">while</span>(head-&gt;next != <span class="org-constant">NULL</span>) {
        head = head-&gt;next;
    }

    <span class="org-comment-delimiter">// </span><span class="org-comment">create new Node</span>
    <span class="org-type">Node</span> *<span class="org-variable-name">n</span> = create(el);
    head-&gt;next = n;
}

<span class="org-comment-delimiter">// </span><span class="org-comment">O(1)</span>
<span class="org-type">void</span> <span class="org-function-name">insert_before_start</span>(<span class="org-type">Node</span> **<span class="org-variable-name">head</span>, <span class="org-type">int</span> <span class="org-variable-name">el</span>) {
    <span class="org-type">Node</span> *<span class="org-variable-name">n</span> = create(el);
    n-&gt;next = *head;
    *head = n;
}

<span class="org-comment-delimiter">// </span><span class="org-comment">O(1)</span>
<span class="org-type">void</span> <span class="org-function-name">insert_after</span>(<span class="org-type">Node</span> *<span class="org-variable-name">ll</span>, <span class="org-type">int</span> <span class="org-variable-name">el</span>) {
    assert(ll != <span class="org-constant">NULL</span>);
    <span class="org-type">Node</span> *<span class="org-variable-name">n</span> = create(el);
    n-&gt;next = ll-&gt;next;
    ll-&gt;next = n;
}

<span class="org-type">int</span> <span class="org-function-name">insert_at_pos</span>(<span class="org-type">Node</span> *<span class="org-variable-name">head</span>, <span class="org-type">unsigned</span> <span class="org-type">int</span> <span class="org-variable-name">pos</span>, <span class="org-type">int</span> <span class="org-variable-name">el</span>) {
    assert(head != <span class="org-constant">NULL</span>);
    assert(pos &gt; 1);

    <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">i</span> = 1; i &lt; pos - 1 &amp;&amp; head != <span class="org-constant">NULL</span>; ++i) {
        head = head-&gt;next;
    }

    <span class="org-keyword">if</span> (head == <span class="org-constant">NULL</span>) {
        <span class="org-keyword">return</span> -1;
    }

    insert_after(head, el);
    <span class="org-keyword">return</span> 0;
}

<span class="org-type">void</span> <span class="org-function-name">print_ll</span>(<span class="org-type">Node</span> *<span class="org-variable-name">head</span>) {
    <span class="org-keyword">while</span>(head != <span class="org-constant">NULL</span>) {
        printf(<span class="org-string">"%d "</span>, head-&gt;data);
        head = head-&gt;next;
    }
    printf(<span class="org-string">"\n"</span>);
}

<span class="org-type">Node</span> *<span class="org-function-name">create</span>(<span class="org-type">int</span> <span class="org-variable-name">val</span>) {
    <span class="org-type">Node</span> *<span class="org-variable-name">head</span> = malloc(<span class="org-keyword">sizeof</span>(Node));
    head-&gt;data = val;
    head-&gt;next = <span class="org-constant">NULL</span>;
    <span class="org-keyword">return</span> head;
}
</pre>
</div>

<pre class="example">
linked list: 
-3 -2 1 2 3 4 5 
reversed linked list: 
5 4 3 2 1 -2 -3 
merged linked list:
5 4 3 2 1 -2 -3 100 200 300 400 500 
==============
linked list after deleting some nodes:
4 3 1 -2 -3 100 200 300 400 
</pre></li>

<li><b>Aim</b>: Write a program to perform the following operations on a circular linked list:
<ul class="org-ul">
<li>Insert a node at the end.</li>
<li>Insert a node at the beginning.</li>
<li>Insert a node at a given position.</li>
<li>Delete a node at the start.</li>
<li>Delete a node at the end.</li>
<li><p>
Display the linked list.
</p>

<div class="org-src-container">
<pre class="src src-C"><span class="org-preprocessor">#include</span> <span class="org-string">&lt;stdio.h&gt;</span>
<span class="org-preprocessor">#include</span> <span class="org-string">&lt;stdlib.h&gt;</span>

<span class="org-keyword">struct</span> <span class="org-type">Node</span> {
    <span class="org-type">int</span> <span class="org-variable-name">data</span>;
    <span class="org-keyword">struct</span> <span class="org-type">Node</span> *<span class="org-variable-name">next</span>;
};

<span class="org-keyword">typedef</span> <span class="org-keyword">struct</span> <span class="org-type">Node</span> <span class="org-type">Node</span>;

<span class="org-type">Node</span>* <span class="org-function-name">create</span>(<span class="org-type">int</span> <span class="org-variable-name">data</span>) {
    <span class="org-type">Node</span> *<span class="org-variable-name">t</span> = malloc(<span class="org-keyword">sizeof</span>(Node));
    t-&gt;data = data;
    t-&gt;next = <span class="org-constant">NULL</span>;

    <span class="org-keyword">return</span> t;
}

<span class="org-comment-delimiter">/*</span>
<span class="org-comment">  1. create a new node with data.</span>
<span class="org-comment">  2. set the "next" of this new node to point to the head node.</span>
<span class="org-comment">  3. Go to the last node of the circular linked list:</span>
<span class="org-comment">  1. set temp to point to head.</span>
<span class="org-comment">  2. loop while head-&gt;next not equal to temp.</span>
<span class="org-comment">  4. change the "next" of the last node to point to this newly created node.</span>
<span class="org-comment-delimiter">*/</span>
<span class="org-type">void</span> <span class="org-function-name">insert_end</span>(<span class="org-type">Node</span> *<span class="org-variable-name">head</span>, <span class="org-type">int</span> <span class="org-variable-name">data</span>) {
    <span class="org-comment-delimiter">// </span><span class="org-comment">create new node</span>
    <span class="org-type">Node</span> *<span class="org-variable-name">node</span> = create(data);

    <span class="org-comment-delimiter">// </span><span class="org-comment">last node in a circular linked list points to the head</span>
    node-&gt;next = head;

    <span class="org-comment-delimiter">// </span><span class="org-comment">go to the last node and point its next to this "node"</span>
    <span class="org-type">Node</span> *<span class="org-variable-name">temp</span> = head;
    <span class="org-keyword">while</span> (head-&gt;next != temp) {
        head = head-&gt;next;
    }
    head-&gt;next = node;
}

<span class="org-comment-delimiter">/*</span>
<span class="org-comment">  1. create a new node with data.</span>
<span class="org-comment">  2. set the "next" of this new node to point to the head node.</span>
<span class="org-comment">  3. Go to the last node of the circular linked list:</span>
<span class="org-comment">  1. set temp to point to head.</span>
<span class="org-comment">  2. loop while head-&gt;next not equal to temp.</span>
<span class="org-comment">  4. change the "next" of the last node to point to this newly created node.</span>
<span class="org-comment">  5. change the head to point to this newly created node.</span>
<span class="org-comment-delimiter">*/</span>
<span class="org-type">void</span> <span class="org-function-name">insert_start</span>(<span class="org-type">Node</span> **<span class="org-variable-name">head</span>, <span class="org-type">int</span> <span class="org-variable-name">data</span>) {
    <span class="org-comment-delimiter">// </span><span class="org-comment">create new node</span>
    <span class="org-type">Node</span> *<span class="org-variable-name">node</span> = create(data);
    node-&gt;next = *head;

    <span class="org-comment-delimiter">// </span><span class="org-comment">go to the last node, store it in temp</span>
    <span class="org-type">Node</span> *<span class="org-variable-name">temp</span> = *head;
    <span class="org-keyword">while</span> (temp-&gt;next != *head) {
        temp = temp-&gt;next;
    }

    <span class="org-comment-delimiter">// </span><span class="org-comment">make last node point to the new head node</span>
    temp-&gt;next = node;

    <span class="org-comment-delimiter">// </span><span class="org-comment">overwrite the head to point to the new head node</span>
    *head = node;
}

<span class="org-comment-delimiter">/*</span>
<span class="org-comment">  1. move ptr to point to the node before the desired position.</span>
<span class="org-comment">  1. loop from 1 to (pos - 1) and set ptr = ptr-&gt;next</span>
<span class="org-comment">  2. create a new node.</span>
<span class="org-comment">  3. create a temp node that is set to point to ptr-&gt;next</span>
<span class="org-comment">  4. set ptr-&gt;next to point to this newly created node</span>
<span class="org-comment">  5. set the next pointer of this newly created node to point to the temp node created in step 3.</span>
<span class="org-comment-delimiter">*/</span>
<span class="org-type">void</span> <span class="org-function-name">insert_pos</span>(<span class="org-type">Node</span> *<span class="org-variable-name">head</span>, <span class="org-type">int</span> <span class="org-variable-name">pos</span>, <span class="org-type">int</span> <span class="org-variable-name">data</span>) {
    <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">i</span> = 1; i &lt; pos - 1; ++i) {
        head = head-&gt;next;
    }

    <span class="org-type">Node</span> *<span class="org-variable-name">node</span> = create(data);
    <span class="org-type">Node</span> *<span class="org-variable-name">temp</span> = head-&gt;next;
    head-&gt;next = node;
    node-&gt;next = temp;
}

<span class="org-comment-delimiter">/*</span>
<span class="org-comment">  1. Go to the second last node of the circular linked list:</span>
<span class="org-comment">  1. set temp to point to head.</span>
<span class="org-comment">  2. loop while head-&gt;next-&gt;next not equal to temp.</span>
<span class="org-comment">  2. store the reference to the last node for deletion (free()).</span>
<span class="org-comment">  3. point the "next" of the second last node to point to head.</span>
<span class="org-comment">  4. free(the last node).</span>
<span class="org-comment-delimiter">*/</span>
<span class="org-type">void</span> <span class="org-function-name">delete_end</span>(<span class="org-type">Node</span> *<span class="org-variable-name">head</span>) {
    <span class="org-type">Node</span> *<span class="org-variable-name">temp</span> = head;
    <span class="org-comment-delimiter">// </span><span class="org-comment">go to the second last node</span>
    <span class="org-keyword">while</span> (head-&gt;next-&gt;next != temp) {
        head = head-&gt;next;
    }

    <span class="org-comment-delimiter">// </span><span class="org-comment">store ref to last node for deletion (free)</span>
    <span class="org-type">Node</span> *<span class="org-variable-name">tb_free</span> = head-&gt;next;

    <span class="org-comment-delimiter">// </span><span class="org-comment">point second last node's next to head</span>
    head-&gt;next = temp;

    free(tb_free);
}

<span class="org-comment-delimiter">/*</span>
<span class="org-comment">  1. Go to the last node of the circular linked list:</span>
<span class="org-comment">  1. set temp to point to head.</span>
<span class="org-comment">  2. loop while head-&gt;next not equal to temp.</span>
<span class="org-comment">  2. point last node's next to point to the second node from head.</span>
<span class="org-comment">  3. set ptr to point to the head node.</span>
<span class="org-comment">  4. move the head by one node:</span>
<span class="org-comment">  1. head = ptr-&gt;next.</span>
<span class="org-comment">  5. free(ptr).</span>
<span class="org-comment-delimiter">*/</span>
<span class="org-type">void</span> <span class="org-function-name">delete_start</span>(<span class="org-type">Node</span> **<span class="org-variable-name">head</span>) {
    <span class="org-comment-delimiter">// </span><span class="org-comment">go to the last node</span>
    <span class="org-type">Node</span> *<span class="org-variable-name">temp</span> = *head;
    <span class="org-type">Node</span> *<span class="org-variable-name">last</span> = *head;
    <span class="org-keyword">while</span> (last-&gt;next != temp) {
        last = last-&gt;next;
    }

    <span class="org-comment-delimiter">// </span><span class="org-comment">point last node's next to second node from head</span>
    last-&gt;next = temp-&gt;next;
    *head = temp-&gt;next;
    free(temp);
}

<span class="org-comment-delimiter">/*</span>
<span class="org-comment">  1. set up a temp node that points to the head node of the circular linked list.</span>

<span class="org-comment">  2. iterate until we're at the last node:</span>
<span class="org-comment">  1. loop while head-&gt;next not equal to temp.</span>
<span class="org-comment">  2. print head-&gt;data</span>
<span class="org-comment">  3. move head by one node (head = head-&gt;next)</span>

<span class="org-comment">  3. write an additional print statemen to print the last node (whose -&gt;next was head)</span>
<span class="org-comment-delimiter">*/</span>
<span class="org-type">void</span> <span class="org-function-name">display</span>(<span class="org-type">Node</span> *<span class="org-variable-name">head</span>) {
    <span class="org-type">Node</span> *<span class="org-variable-name">temp</span> = head;

    <span class="org-keyword">while</span>(head-&gt;next != temp) {
        printf(<span class="org-string">"%d -&gt; "</span>, head-&gt;data);
        head = head-&gt;next;
    }
    printf(<span class="org-string">"%d -&gt; NULL\n"</span>, head-&gt;data);
}

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
    <span class="org-type">Node</span> *<span class="org-variable-name">head</span> = create(10); <span class="org-comment-delimiter">// </span><span class="org-comment">10 -&gt; NULL</span>
    head-&gt;next = head;

    insert_end(head, 20); <span class="org-comment-delimiter">// </span><span class="org-comment">10 -&gt; 20 -&gt; 10</span>
    insert_end(head, 30); <span class="org-comment-delimiter">// </span><span class="org-comment">10 -&gt; 20 -&gt; 30 -&gt; 10</span>
    insert_end(head, 40); <span class="org-comment-delimiter">// </span><span class="org-comment">10 -&gt; 20 -&gt; 30 -&gt; 40 -&gt; 10</span>
    insert_end(head, 50); <span class="org-comment-delimiter">// </span><span class="org-comment">10 -&gt; 20 -&gt; 30 -&gt; 40 -&gt; 50 -&gt; 10</span>
    insert_end(head, 60); <span class="org-comment-delimiter">// </span><span class="org-comment">10 -&gt; 20 -&gt; 30 -&gt; 40 -&gt; 50 -&gt; 60 -&gt; 10</span>
    insert_end(head, 70); <span class="org-comment-delimiter">// </span><span class="org-comment">10 -&gt; 20 -&gt; 30 -&gt; 40 -&gt; 50 -&gt; 60 -&gt; 70 -&gt; 10</span>

    insert_start(&amp;head, 1); <span class="org-comment-delimiter">// </span><span class="org-comment">1 -&gt; 10 -&gt; 20 -&gt; 30 -&gt; 40 -&gt; 50 -&gt; 60 -&gt; 70 -&gt; 1</span>
    insert_start(&amp;head, 2); <span class="org-comment-delimiter">// </span><span class="org-comment">2 -&gt; 1 -&gt; 10 -&gt; 20 -&gt; 30 -&gt; 40 -&gt; 50 -&gt; 60 -&gt; 70 -&gt; 2</span>
    insert_start(&amp;head, 3); <span class="org-comment-delimiter">// </span><span class="org-comment">3 -&gt; 2 -&gt; 1 -&gt; 10 -&gt; 20 -&gt; 30 -&gt; 40 -&gt; 50 -&gt; 60 -&gt; 70 -&gt; 3</span>

    insert_pos(head, 3, 5); <span class="org-comment-delimiter">// </span><span class="org-comment">3 -&gt; 2 -&gt; 5 -&gt; 1 -&gt; 10 -&gt; 20 -&gt; 30 -&gt; 40 -&gt; 50 -&gt; 60 -&gt; 70 -&gt; 3</span>
    insert_pos(head, 4, 7); <span class="org-comment-delimiter">// </span><span class="org-comment">3 -&gt; 2 -&gt; 5 -&gt; 7 -&gt; 1 -&gt; 10 -&gt; 20 -&gt; 30 -&gt; 40 -&gt; 50 -&gt; 60 -&gt; 70 -&gt; 3</span>

    delete_end(head); <span class="org-comment-delimiter">// </span><span class="org-comment">3 -&gt; 2 -&gt; 5 -&gt; 7 -&gt; 1 -&gt; 10 -&gt; 20 -&gt; 30 -&gt; 40 -&gt; 50 -&gt; 60 -&gt; 3</span>
    delete_end(head); <span class="org-comment-delimiter">// </span><span class="org-comment">3 -&gt; 2 -&gt; 5 -&gt; 7 -&gt; 1 -&gt; 10 -&gt; 20 -&gt; 30 -&gt; 40 -&gt; 50 -&gt; 3</span>
    delete_end(head); <span class="org-comment-delimiter">// </span><span class="org-comment">3 -&gt; 2 -&gt; 5 -&gt; 7 -&gt; 1 -&gt; 10 -&gt; 20 -&gt; 30 -&gt; 40 -&gt; 3</span>

    delete_start(&amp;head); <span class="org-comment-delimiter">// </span><span class="org-comment">2 -&gt; 5 -&gt; 7 -&gt; 1 -&gt; 10 -&gt; 20 -&gt; 30 -&gt; 40 -&gt; 2</span>
    delete_start(&amp;head); <span class="org-comment-delimiter">// </span><span class="org-comment">5 -&gt; 7 -&gt; 1 -&gt; 10 -&gt; 20 -&gt; 30 -&gt; 40 -&gt; 5</span>

    display(head);
}
</pre>
</div>

<pre class="example">
5 -&gt; 7 -&gt; 1 -&gt; 10 -&gt; 20 -&gt; 30 -&gt; 40 -&gt; NULL
</pre></li>
</ul></li>
</ol>
</div>
</body>
</html>
