<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2022-09-05 Mon 22:46 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>DSA in C</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="siddhant" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<h1 class="title">DSA in C</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgb92e6af">1. Arrays</a>
<ul>
<li><a href="#orgec7ef3d">1.1. Array representation</a></li>
<li><a href="#org5827bf6">1.2. Inserting elements</a>
<ul>
<li><a href="#org356cc44">1.2.1. Inserting at index <code>n</code></a></li>
<li><a href="#org03bb9e8">1.2.2. Append element</a></li>
<li><a href="#org7746916">1.2.3. Prepend element</a></li>
</ul>
</li>
<li><a href="#orge3e7e80">1.3. Deleting elements</a></li>
<li><a href="#org024ba84">1.4. 2D Arrays</a></li>
</ul>
</li>
<li><a href="#org1fe9d48">2. String as an array of characters</a></li>
<li><a href="#org60c3d9c">3. Linked list</a>
<ul>
<li><a href="#orgfac2aa7">3.1. Searching in a linked list</a></li>
<li><a href="#orgf9265b0">3.2. insertion</a></li>
<li><a href="#orgd061c51">3.3. Deletion</a></li>
<li><a href="#orgc2a54e0">3.4. Mergin two linked lists</a></li>
<li><a href="#org170c56e">3.5. Circular linked lists</a></li>
</ul>
</li>
<li><a href="#orge7430f6">4. <span class="todo TODO">TODO</span> Stacks</a></li>
<li><a href="#org2796468">5. <span class="todo TODO">TODO</span> Queues</a></li>
<li><a href="#org0169ce0">6. <span class="todo TODO">TODO</span> Trees</a></li>
<li><a href="#org7bd2bcd">7. <span class="todo TODO">TODO</span> Graphs</a></li>
<li><a href="#orgd6174bd">8. <span class="todo TODO">TODO</span> Sorting</a>
<ul>
<li><a href="#org93ae496">8.1. Bubble Sort</a></li>
<li><a href="#org9ac4527">8.2. <span class="todo TODO">TODO</span> Insertion Sort</a></li>
<li><a href="#org75285d4">8.3. <span class="todo TODO">TODO</span> Quick Sort</a></li>
<li><a href="#org1a3d836">8.4. <span class="todo TODO">TODO</span> Selection Sort</a></li>
<li><a href="#org8d77dda">8.5. <span class="todo TODO">TODO</span> Merge Sort</a></li>
<li><a href="#org811e1f2">8.6. <span class="todo TODO">TODO</span> Heap Sort</a></li>
<li><a href="#org8ab7566">8.7. <span class="todo TODO">TODO</span> Hashing Techniques</a></li>
</ul>
</li>
<li><a href="#orgc8b514c">9. Searching</a>
<ul>
<li><a href="#org07b89db">9.1. Linear search</a></li>
<li><a href="#org71c6f35">9.2. Binary Search</a></li>
</ul>
</li>
<li><a href="#orgd9dcf7f">10. <span class="todo TODO">TODO</span> File Handling</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgb92e6af" class="outline-2">
<h2 id="orgb92e6af"><span class="section-number-2">1</span> Arrays</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-orgec7ef3d" class="outline-3">
<h3 id="orgec7ef3d"><span class="section-number-3">1.1</span> Array representation</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">
<pre class="src src-C"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;stdio.h&gt;</span>

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
    <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">array of size 10 initialised with first</span>
    <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">three elements set to 1, 2 and, 3 respectively.</span>
    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">arr</span>[10] = {1,2,3};

    <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">rest of the elements set using a for loop</span>
    <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 3; i &lt; 10; ++i) {
        arr[i] = i + 1;
    }

    <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 0; i &lt; 10; ++i) {
        printf(<span style="font-style: italic;">"%d "</span>, arr[i]);
    }
}
</pre>
</div>

<pre class="example">
1 2 3 4 5 6 7 8 9 10
</pre>



<p>
Arrays in C can be accessed using pointers also.
</p>

<p>
The identifier name (<code>arr</code> in this case) is the pointer to the first element in
the array.
</p>

<p>
Adding (or incrementing/decrementing) pointers value can give access to the
elements of the array. In case of integer arrays, adding 1 adds size of <code>int</code> to
the address of first element in array to get the address of second element. So,
to get the third element, we can do <code>(arr+3)</code>.
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;stdio.h&gt;</span>

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
    <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">array of size 10 initialised with first</span>
    <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">three elements set to 1, 2 and, 3 respectively.</span>
    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">arr</span>[10] = {1,2,3};

    <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">rest of the elements set using a for loop</span>
    <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 3; i &lt; 10; ++i) {
        *(arr+i) = i + 1;
    }

    <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 0; i &lt; 10; ++i) {
        printf(<span style="font-style: italic;">"%d "</span>, *(arr+i));
    }
}
</pre>
</div>

<pre class="example">
1 2 3 4 5 6 7 8 9 10
</pre>
</div>
</div>
<div id="outline-container-org5827bf6" class="outline-3">
<h3 id="org5827bf6"><span class="section-number-3">1.2</span> Inserting elements</h3>
<div class="outline-text-3" id="text-1-2">
</div>
<div id="outline-container-org356cc44" class="outline-4">
<h4 id="org356cc44"><span class="section-number-4">1.2.1</span> Inserting at index <code>n</code></h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
The code below initiliases an array of size 100 to ignore any resizing that may
be required later.
</p>

<p>
To insert an element at index <code>n</code>:
</p>

<ul class="org-ul">
<li>We move each element one index after its current position. Iterating from last
to n (inclusive) and moving i<sub>th</sub> to (i+1)<sub>th</sub> position is one way to do it.</li>

<li>we simply put a desired value at index <code>n</code>.</li>
</ul>

<p>
The code below shows this algorithm in action. It also prints after insertion.
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;stdio.h&gt;</span>

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">insert</span>(<span style="font-weight: bold; text-decoration: underline;">int</span>* <span style="font-weight: bold; font-style: italic;">arr</span>, <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">size</span>, <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">pos</span>, <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">elem</span>) {
  <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = size - 1; i &gt;= pos - 1; --i) {
    arr[i + 1] = arr[i];
  }

  arr[pos - 1] = elem;
  <span style="font-weight: bold;">return</span> size + 1;
}

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">n</span> = 5;
  <span style="font-weight: bold; font-style: italic;">//            </span><span style="font-weight: bold; font-style: italic;">0 1 2 3 4</span>
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">arr</span>[7] = {1,2,3,4,5};

  <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">last position</span>
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">pos</span> = 3;
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">elem</span> = 999;

  n = insert(arr, n, pos, elem);

  <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 0; i &lt; n; i++) {
    printf(<span style="font-style: italic;">"%d "</span>, arr[i]);
  }
  printf(<span style="font-style: italic;">"\n"</span>);

  <span style="font-weight: bold;">return</span> 0;
}
</pre>
</div>

<pre class="example">
1 2 999 3 4 5
</pre>


<p>
Ideally, we should not take array of size more than what we need and we should
use <code>realloc</code> to resize the array for insertion. C++ has <a href="https://en.cppreference.com/w/cpp/container/vector">vectors</a> for this
usecase.
</p>

<p>
Let's look at a program that uses <code>realloc</code> to resize the array for insertion.
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;stdio.h&gt;</span>
<span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;stdlib.h&gt;</span>


<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
    <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">array of size 7</span>
    <span style="font-weight: bold; text-decoration: underline;">int</span>* <span style="font-weight: bold; font-style: italic;">arr</span> =  (<span style="font-weight: bold; text-decoration: underline;">int</span> *) malloc(7 * <span style="font-weight: bold;">sizeof</span>(<span style="font-weight: bold; text-decoration: underline;">int</span>));
    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">n</span> = 4;

    <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">initilalize elems</span>
    <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 0; i &lt; 7; i++) {
      arr[i] = i + 1;
    }

    <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">increase size of insertion (doubling)</span>
    *arr = *(<span style="font-weight: bold; text-decoration: underline;">int</span>*) realloc(arr, 2 * 7 * <span style="font-weight: bold;">sizeof</span>(<span style="font-weight: bold; text-decoration: underline;">int</span>));

    <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">shift elems to the right by 1</span>
    <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 12; i &gt;= n; --i) {
        arr[i + 1] = arr[i];
    }

    *(arr+n) = 69;

    <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 0; i &lt; 14; ++i) {
        printf(<span style="font-style: italic;">"%d "</span>, arr[i]);
    }
}
</pre>
</div>

<pre class="example">
1 2 3 4 69 5 6 7 0 0 0 134465 0 0
</pre>


<p>
The programm above gets really close to the implementation of <code>vectors</code>
(growable arrays). If we keep track of capacity (max elems a vector can store)
and length (total elems currently in the array), we can check if we need to grow
(double the size) the array size using <code>realloc</code>. This is more efficient the
restricting array size to a certain number (100 in previous example).
</p>

<p>
References:
</p>

<ul class="org-ul">
<li><a href="https://eddmann.com/posts/implementing-a-dynamic-vector-array-in-c/">Implementing a Dynamic Vector (Array) in C</a></li>
</ul>
</div>
</div>
<div id="outline-container-org03bb9e8" class="outline-4">
<h4 id="org03bb9e8"><span class="section-number-4">1.2.2</span> Append element</h4>
<div class="outline-text-4" id="text-1-2-2">
<p>
Appending an element is just inserting a new element at the end of the array.
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;stdio.h&gt;</span>

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">insert</span>(<span style="font-weight: bold; text-decoration: underline;">int</span>* <span style="font-weight: bold; font-style: italic;">arr</span>, <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">size</span>, <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">pos</span>, <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">elem</span>) {
  <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = size - 1; i &gt;= pos - 1; --i) {
    arr[i + 1] = arr[i];
  }

  arr[pos - 1] = elem;
  <span style="font-weight: bold;">return</span> size + 1;
}

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">n</span> = 5;
  <span style="font-weight: bold; font-style: italic;">//            </span><span style="font-weight: bold; font-style: italic;">0 1 2 3 4</span>
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">arr</span>[7] = {1,2,3,4,5};

  <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">last position</span>
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">pos</span> = n + 1;
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">elem</span> = 999;

  n = insert(arr, n, pos, elem);

  <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 0; i &lt; n; i++) {
    printf(<span style="font-style: italic;">"%d "</span>, arr[i]);
  }
  printf(<span style="font-style: italic;">"\n"</span>);

  <span style="font-weight: bold;">return</span> 0;
}
</pre>
</div>

<pre class="example">
1 2 3 4 5 999
</pre>
</div>
</div>

<div id="outline-container-org7746916" class="outline-4">
<h4 id="org7746916"><span class="section-number-4">1.2.3</span> Prepend element</h4>
<div class="outline-text-4" id="text-1-2-3">
<p>
Prepending an element is just inserting a new element at the beginning of the
array.
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;stdio.h&gt;</span>

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">insert</span>(<span style="font-weight: bold; text-decoration: underline;">int</span>* <span style="font-weight: bold; font-style: italic;">arr</span>, <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">size</span>, <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">pos</span>, <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">elem</span>) {
  <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = size - 1; i &gt;= pos - 1; --i) {
    arr[i + 1] = arr[i];
  }

  arr[pos - 1] = elem;
  <span style="font-weight: bold;">return</span> size + 1;
}

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">n</span> = 5;
  <span style="font-weight: bold; font-style: italic;">//            </span><span style="font-weight: bold; font-style: italic;">0 1 2 3 4</span>
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">arr</span>[7] = {1,2,3,4,5};

  <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">last position</span>
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">pos</span> = 1;
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">elem</span> = 999;

  n = insert(arr, n, pos, elem);

  <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 0; i &lt; n; i++) {
    printf(<span style="font-style: italic;">"%d "</span>, arr[i]);
  }
  printf(<span style="font-style: italic;">"\n"</span>);

  <span style="font-weight: bold;">return</span> 0;
}
</pre>
</div>

<pre class="example">
999 1 2 3 4 5
</pre>
</div>
</div>
</div>

<div id="outline-container-orge3e7e80" class="outline-3">
<h3 id="orge3e7e80"><span class="section-number-3">1.3</span> Deleting elements</h3>
<div class="outline-text-3" id="text-1-3">
<p>
We do exactly the opposite of what we did in the <a href="#org356cc44">Inserting at index <code>n</code></a>
section.  Instead of iterating from the last element till the position <code>n</code>, we
iterate from postion <code>n</code> till the last and shift every element one index back
from it's original position.
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;stdio.h&gt;</span>

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">pos</span> = 3;
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">elem</span>;
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">n</span> = 5;
  <span style="font-weight: bold; font-style: italic;">//            </span><span style="font-weight: bold; font-style: italic;">0 1 2 3 4</span>
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">arr</span>[7] = {1,2,3,4,5};

  <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = pos - 1; i &lt; n - 1; i++) {
    arr[i] = arr[i+1];
  }

  n--;

  <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 0; i &lt; n; i++) {
    printf(<span style="font-style: italic;">"%d "</span>, arr[i]);
  }
  printf(<span style="font-style: italic;">"\n"</span>);

  <span style="font-weight: bold;">return</span> 0;
}
</pre>
</div>

<pre class="example">
1 2 4 5
</pre>
</div>
</div>

<div id="outline-container-org024ba84" class="outline-3">
<h3 id="org024ba84"><span class="section-number-3">1.4</span> 2D Arrays</h3>
<div class="outline-text-3" id="text-1-4">
<p>
Square matrix multiplication using 2D arrays in c.
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;stdio.h&gt;</span>

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">matrix1</span>[][3] = {{1,2,3}
                       ,{4,5,6}
                       ,{7,8,9}};

    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">matrix2</span>[][3] = {{1,0,1}
                       ,{1,1,0}
                       ,{0,0,1}};

    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">result</span>[][3] = {{0,0,0}
                      ,{0,0,0}
                      ,{0,0,0}};

    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">n_matrix1</span> = <span style="font-weight: bold;">sizeof</span>(matrix1) / <span style="font-weight: bold;">sizeof</span>(matrix1[0]);

    <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 0; i &lt; n_matrix1; ++i) {
        <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">j</span> = 0; j &lt; n_matrix1; ++j) {
            <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">k</span> = 0; k &lt; n_matrix1; ++k) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }

    <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 0; i &lt; n_matrix1; ++i) {
        <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">j</span> = 0; j &lt; n_matrix1; ++j) {
            printf(<span style="font-style: italic;">"%d "</span>, result[i][j]);
        }
        printf(<span style="font-style: italic;">"\n"</span>);
    }
}
</pre>
</div>

<pre class="example">
3 2 4
9 5 10
15 8 16
</pre>
</div>
</div>
</div>

<div id="outline-container-org1fe9d48" class="outline-2">
<h2 id="org1fe9d48"><span class="section-number-2">2</span> String as an array of characters</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">
<pre class="src src-C"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;stdio.h&gt;</span>

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
    <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">char *s = "this is a string!";</span>
    <span style="font-weight: bold; text-decoration: underline;">char</span> <span style="font-weight: bold; font-style: italic;">s</span>[] = <span style="font-style: italic;">"this is a string"</span>;
    printf(<span style="font-style: italic;">"%s"</span>, s);
    <span style="font-weight: bold;">return</span> 0;
}
</pre>
</div>

<pre class="example">
this is a string
</pre>


<p>
Iterate through each character of a string and print it with a space afterwards.
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;stdio.h&gt;</span>

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
    <span style="font-weight: bold; text-decoration: underline;">char</span> *<span style="font-weight: bold; font-style: italic;">s</span> = <span style="font-style: italic;">"print this!"</span>;
    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">string_size</span> = strlen(s);

    <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 0; i &lt; string_size; ++i) {
        <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">*(s + i) -&gt; s[i]</span>
        printf(<span style="font-style: italic;">"%c "</span>, *(s + i));
    }

    <span style="font-weight: bold;">return</span> 0;
}
</pre>
</div>

<p>
Take string input from user
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;stdio.h&gt;</span>

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
  <span style="font-weight: bold; text-decoration: underline;">char</span> *<span style="font-weight: bold; font-style: italic;">str</span>;
  <span style="font-weight: bold; text-decoration: underline;">size_t</span> <span style="font-weight: bold; font-style: italic;">len</span> = 0;
  <span style="font-weight: bold; text-decoration: underline;">ssize_t</span> <span style="font-weight: bold; font-style: italic;">line_size</span> = 0;

  getline(&amp;str, &amp;len, stdin);
  printf(<span style="font-style: italic;">"%s"</span>, str);
}
</pre>
</div>
</div>
</div>

<div id="outline-container-org60c3d9c" class="outline-2">
<h2 id="org60c3d9c"><span class="section-number-2">3</span> Linked list</h2>
<div class="outline-text-2" id="text-3">
<p>
A simple Linked List implementation that contains integer data elements.
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;stdio.h&gt;</span>

<span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">linked list node declaration</span>
<span style="font-weight: bold;">struct</span> <span style="font-weight: bold; text-decoration: underline;">Node</span> {
    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">val</span>;
    <span style="font-weight: bold;">struct</span> <span style="font-weight: bold; text-decoration: underline;">Node</span>* <span style="font-weight: bold; font-style: italic;">next</span>;
};

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
    <span style="font-weight: bold;">struct</span> <span style="font-weight: bold; text-decoration: underline;">Node</span>* <span style="font-weight: bold; font-style: italic;">head</span> = malloc(<span style="font-weight: bold;">sizeof</span>(<span style="font-weight: bold;">struct</span> <span style="font-weight: bold; text-decoration: underline;">Node</span>));
    head-&gt;val = 69;

    <span style="font-weight: bold;">struct</span> <span style="font-weight: bold; text-decoration: underline;">Node</span>* <span style="font-weight: bold; font-style: italic;">last</span> = head;
    <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 100; i &lt;= 110; ++i) {
        <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">create a node</span>
        <span style="font-weight: bold;">struct</span> <span style="font-weight: bold; text-decoration: underline;">Node</span>* <span style="font-weight: bold; font-style: italic;">temp</span> = malloc(<span style="font-weight: bold;">sizeof</span>(<span style="font-weight: bold;">struct</span> <span style="font-weight: bold; text-decoration: underline;">Node</span>));
        temp-&gt;val = i;

        <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">append</span>
        last-&gt;next = temp;
        last = last-&gt;next;
    }

    <span style="font-weight: bold;">struct</span> <span style="font-weight: bold; text-decoration: underline;">Node</span>* <span style="font-weight: bold; font-style: italic;">iter</span> = head;

    <span style="font-weight: bold;">while</span>(iter != <span style="font-weight: bold; text-decoration: underline;">NULL</span>) {
        printf(<span style="font-style: italic;">"%d "</span>, iter-&gt;val);
        iter = iter-&gt;next;
    }
    printf(<span style="font-style: italic;">"\n"</span>);
}
</pre>
</div>

<pre class="example">
69 100 101 102 103 104 105 106 107 108 109 110
</pre>
</div>

<div id="outline-container-orgfac2aa7" class="outline-3">
<h3 id="orgfac2aa7"><span class="section-number-3">3.1</span> Searching in a linked list</h3>
</div>
<div id="outline-container-orgf9265b0" class="outline-3">
<h3 id="orgf9265b0"><span class="section-number-3">3.2</span> insertion</h3>
</div>
<div id="outline-container-orgd061c51" class="outline-3">
<h3 id="orgd061c51"><span class="section-number-3">3.3</span> Deletion</h3>
</div>
<div id="outline-container-orgc2a54e0" class="outline-3">
<h3 id="orgc2a54e0"><span class="section-number-3">3.4</span> Mergin two linked lists</h3>
</div>
<div id="outline-container-org170c56e" class="outline-3">
<h3 id="org170c56e"><span class="section-number-3">3.5</span> Circular linked lists</h3>
</div>
</div>

<div id="outline-container-orge7430f6" class="outline-2">
<h2 id="orge7430f6"><span class="section-number-2">4</span> <span class="todo TODO">TODO</span> Stacks</h2>
</div>
<div id="outline-container-org2796468" class="outline-2">
<h2 id="org2796468"><span class="section-number-2">5</span> <span class="todo TODO">TODO</span> Queues</h2>
</div>
<div id="outline-container-org0169ce0" class="outline-2">
<h2 id="org0169ce0"><span class="section-number-2">6</span> <span class="todo TODO">TODO</span> Trees</h2>
</div>
<div id="outline-container-org7bd2bcd" class="outline-2">
<h2 id="org7bd2bcd"><span class="section-number-2">7</span> <span class="todo TODO">TODO</span> Graphs</h2>
</div>
<div id="outline-container-orgd6174bd" class="outline-2">
<h2 id="orgd6174bd"><span class="section-number-2">8</span> <span class="todo TODO">TODO</span> Sorting</h2>
<div class="outline-text-2" id="text-8">
</div>
<div id="outline-container-org93ae496" class="outline-3">
<h3 id="org93ae496"><span class="section-number-3">8.1</span> Bubble Sort</h3>
<div class="outline-text-3" id="text-8-1">
<div class="org-src-container">
<pre class="src src-C"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;stdio.h&gt;</span>

<span style="font-weight: bold; text-decoration: underline;">void</span> <span style="font-weight: bold;">swap</span>(<span style="font-weight: bold; text-decoration: underline;">int</span> *<span style="font-weight: bold; font-style: italic;">a</span>, <span style="font-weight: bold; text-decoration: underline;">int</span> *<span style="font-weight: bold; font-style: italic;">b</span>) {
    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">temp</span> = *a;
    *a = *b;
    *b = temp;
}

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">arr</span>[] = {1,6,3,9,2,0};
    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">size</span> = <span style="font-weight: bold;">sizeof</span>(arr) / <span style="font-weight: bold;">sizeof</span>(<span style="font-weight: bold; text-decoration: underline;">int</span>);

    <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 0; i &lt; (size); i++) {
        <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">j</span> = 0; j &lt; (size - 1); j++) {
            <span style="font-weight: bold;">if</span> (arr[j] &gt; arr[j + 1]) {
                swap(&amp;arr[j], &amp;arr[j + 1]);
            }
        }
    }

    <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 0; i &lt; (size); i++) {
        printf(<span style="font-style: italic;">"%d "</span>, arr[i]);
    }

}
</pre>
</div>
</div>
</div>

<div id="outline-container-org9ac4527" class="outline-3">
<h3 id="org9ac4527"><span class="section-number-3">8.2</span> <span class="todo TODO">TODO</span> Insertion Sort</h3>
</div>
<div id="outline-container-org75285d4" class="outline-3">
<h3 id="org75285d4"><span class="section-number-3">8.3</span> <span class="todo TODO">TODO</span> Quick Sort</h3>
</div>
<div id="outline-container-org1a3d836" class="outline-3">
<h3 id="org1a3d836"><span class="section-number-3">8.4</span> <span class="todo TODO">TODO</span> Selection Sort</h3>
</div>
<div id="outline-container-org8d77dda" class="outline-3">
<h3 id="org8d77dda"><span class="section-number-3">8.5</span> <span class="todo TODO">TODO</span> Merge Sort</h3>
</div>
<div id="outline-container-org811e1f2" class="outline-3">
<h3 id="org811e1f2"><span class="section-number-3">8.6</span> <span class="todo TODO">TODO</span> Heap Sort</h3>
</div>
<div id="outline-container-org8ab7566" class="outline-3">
<h3 id="org8ab7566"><span class="section-number-3">8.7</span> <span class="todo TODO">TODO</span> Hashing Techniques</h3>
</div>
</div>
<div id="outline-container-orgc8b514c" class="outline-2">
<h2 id="orgc8b514c"><span class="section-number-2">9</span> Searching</h2>
<div class="outline-text-2" id="text-9">
</div>
<div id="outline-container-org07b89db" class="outline-3">
<h3 id="org07b89db"><span class="section-number-3">9.1</span> Linear search</h3>
<div class="outline-text-3" id="text-9-1">
<div class="org-src-container">
<pre class="src src-C"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;stdio.h&gt;</span>

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">arr</span>[] = {1,2,3,99,2389,21};
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">size</span> = <span style="font-weight: bold;">sizeof</span>(arr) / <span style="font-weight: bold;">sizeof</span>(<span style="font-weight: bold; text-decoration: underline;">int</span>);
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">target</span> = 99;

  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">found_index</span> = -1;

  <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 0; i &lt; size; ++i) {
    <span style="font-weight: bold;">if</span> (arr[i] == target) {
      found_index = i;
    }
  }

  <span style="font-weight: bold;">if</span> (found_index &gt;= 0) {
    printf(<span style="font-style: italic;">"Element %d found at index %d\n"</span>, arr[found_index], found_index);
  } <span style="font-weight: bold;">else</span> {
    printf(<span style="font-style: italic;">"element not found"</span>);
  }

  <span style="font-weight: bold;">return</span> 0;
}
</pre>
</div>

<p>
Count number of occurences in an array
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;stdio.h&gt;</span>

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">count</span>(<span style="font-weight: bold; text-decoration: underline;">int</span> *<span style="font-weight: bold; font-style: italic;">arr</span>, <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">size</span>, <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">target</span>) {
    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">count</span> = 0;

    <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 0; i &lt; size; i++) {
        <span style="font-weight: bold;">if</span> (arr[i] == target) {
            count++;
        }
    }
    <span style="font-weight: bold;">return</span> count;
}

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">arr</span>[] = {1, 3, 4, 4, 6, 9, 4};
    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">target</span> = 4;
    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">size</span> = <span style="font-weight: bold;">sizeof</span>(arr) / <span style="font-weight: bold;">sizeof</span>(<span style="font-weight: bold; text-decoration: underline;">int</span>);

    printf(<span style="font-style: italic;">"%d occurs %d times in the array"</span>, target, count(arr, size, target));
}
</pre>
</div>
</div>
</div>

<div id="outline-container-org71c6f35" class="outline-3">
<h3 id="org71c6f35"><span class="section-number-3">9.2</span> Binary Search</h3>
<div class="outline-text-3" id="text-9-2">
<p>
Using recursion.
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;stdio.h&gt;</span>

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">isearch</span>(<span style="font-weight: bold; text-decoration: underline;">int</span> *<span style="font-weight: bold; font-style: italic;">arr</span>, <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">target</span>, <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">left</span>, <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">right</span>) {
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">mid</span> = (left + right) / 2;
  <span style="font-weight: bold;">if</span> (arr[mid] == target) {
    <span style="font-weight: bold;">return</span> mid;
  }
  <span style="font-weight: bold;">else</span> <span style="font-weight: bold;">if</span> (arr[mid] &gt; target) {
    <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">search left</span>
    <span style="font-weight: bold;">return</span> isearch(arr, target, left, mid);
  } <span style="font-weight: bold;">else</span> {
    <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">search right</span>
    <span style="font-weight: bold;">return</span> isearch(arr, target, mid, right);
  }

  <span style="font-weight: bold;">return</span> -1;
}

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">arr</span>[] = {1,2,3,4,5,8,12};
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">target</span> = 8;
  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">size</span> = <span style="font-weight: bold;">sizeof</span>(arr) / <span style="font-weight: bold;">sizeof</span>(<span style="font-weight: bold; text-decoration: underline;">int</span>);

  <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">index</span> = isearch(arr, target, 0,size - 1);

  <span style="font-weight: bold;">if</span> (index &gt;= 0) {
    printf(<span style="font-style: italic;">"Element %d found at index %d\n"</span>, arr[index], index);
  } <span style="font-weight: bold;">else</span> {
    printf(<span style="font-style: italic;">"element not found"</span>);
  }
  <span style="font-weight: bold;">return</span> 0;
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgd9dcf7f" class="outline-2">
<h2 id="orgd9dcf7f"><span class="section-number-2">10</span> <span class="todo TODO">TODO</span> File Handling</h2>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Author: siddhant</p>
<p class="date">Created: 2022-09-05 Mon 22:46</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
