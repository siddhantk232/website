<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Number Theory</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        displayAlign: "center",
        displayIndent: "0em",

        "HTML-CSS": { scale: 100,
                        linebreaks: { automatic: "false" },
                        webFont: "TeX"
                       },
        SVG: {scale: 100,
              linebreaks: { automatic: "false" },
              font: "TeX"},
        NativeMML: {scale: 100},
        TeX: { equationNumbers: {autoNumber: "AMS"},
               MultLineWidth: "85%",
               TagSide: "right",
               TagIndent: ".8em"
             }
});
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML"></script>
</head>
<body>
<div id="content" class="content">
<h1 class="title">Number Theory</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org1188781">1. Introduction</a></li>
<li><a href="#org21871d3">2. Prime Number Generation (Sieve, Segmented Sieve)</a>
<ul>
<li><a href="#orga8c8266">2.1. Prime Factorization</a></li>
<li><a href="#org18220b3">2.2. Divisor Finding</a></li>
<li><a href="#orgb021661">2.3. <span class="todo TODO">TODO</span> Sieve of Eratosthenes</a></li>
<li><a href="#org2cd1283">2.4. <span class="todo TODO">TODO</span> Segmented Sieve of Eratosthenes</a></li>
</ul>
</li>
<li><a href="#orgff092c1">3. <span class="todo TODO">TODO</span> Euler Totient Theorem</a></li>
<li><a href="#org852211e">4. <span class="todo TODO">TODO</span> Fermatâ€™s Theorem* TODO HCF &amp; LCM (Euclid)</a>
<ul>
<li><a href="#org983aceb">4.1. GCD (Greatest Common Divisor)</a></li>
<li><a href="#org311ac65">4.2. Extended Euclidean</a></li>
</ul>
</li>
<li><a href="#orgc0f9b1b">5. <span class="todo TODO">TODO</span> Linear Diophantine Equations (Extended Euclid)</a></li>
<li><a href="#orgf404aa6">6. <span class="todo TODO">TODO</span> Modulus Arithmetic (addition,multiplication,subtraction,modular Inverse)</a>
<ul>
<li><a href="#org8979c96">6.1. Modulo Arithmetic</a></li>
<li><a href="#org9778e02">6.2. Proofs</a></li>
</ul>
</li>
<li><a href="#orge6879b7">7. <span class="todo TODO">TODO</span> Cycle Finding (Floyd Algo and Brent Algo)</a></li>
<li><a href="#org490999e">8. <span class="todo TODO">TODO</span> Integer Factorization (Trial Division , Pollard Rho method) &#x2013;&gt; colorado.edu A Quick Tutorial on Pollard's Rho Algorithm</a></li>
<li><a href="#org0441bf2">9. <span class="todo TODO">TODO</span> Lucas Theorem (Simple &amp; Advance)</a></li>
<li><a href="#org0fbadf9">10. <span class="todo TODO">TODO</span> Chinese Remainder Theorem</a></li>
<li><a href="#orge7cfce2">11. <span class="todo TODO">TODO</span> Wilson Theorem</a></li>
<li><a href="#org864b186">12. <span class="todo TODO">TODO</span> Miller - Rabin Primality Testing</a></li>
<li><a href="#orgf0bf526">13. <span class="todo TODO">TODO</span> Perfect Numbers</a></li>
<li><a href="#org6041946">14. <span class="todo TODO">TODO</span> Goldbach Conjecture</a></li>
<li><a href="#orgf19f8e2">15. Floor/Ceil</a></li>
<li><a href="#org569e436">16. Divisors</a></li>
<li><a href="#org483d313">17. <span class="todo TODO">TODO</span> Binary Exponentiation</a></li>
<li><a href="#orgd3b4eda">18. <span class="todo TODO">TODO</span> Modular "division"</a></li>
<li><a href="#orgda0160f">19. Instance of Mobius</a></li>
</ul>
</div>
</div>

<div id="outline-container-org1188781" class="outline-2">
<h2 id="org1188781"><span class="section-number-2">1.</span> Introduction</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>Try to find an explicit equation before jumping in.</li>
<li>With that equation, you can mess aroung (try to normalise) to make it easier to solve.</li>
</ul>
</div>
</div>

<div id="outline-container-org21871d3" class="outline-2">
<h2 id="org21871d3"><span class="section-number-2">2.</span> Prime Number Generation (Sieve, Segmented Sieve)</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-orga8c8266" class="outline-3">
<h3 id="orga8c8266"><span class="section-number-3">2.1.</span> Prime Factorization</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Breaking a number down to a product of primes.
Example:
</p>

<p>
\[ 10 = 2 * 5 \]
\[ 254436 = 2^2 * 3 * 7 * 13 * 233 \]
\( 27 = 3 * 9 \) is <b>not valid</b> as 9 isn't a prime and can be further broken down into \(3 * 3\).
</p>

<ul class="org-ul">
<li><b>Goal</b>: break \(x\) down into product of its prime divisors.</li>
<li><p>
<b>Naive</b>: Try all numbers up to x.
</p>
<div class="org-src-container">
<pre class="src src-cpp"><span class="org-preprocessor">#include</span><span class="org-string">&lt;iostream&gt;</span>
<span class="org-preprocessor">#include</span><span class="org-string">&lt;vector&gt;</span>

<span class="org-keyword">using</span> <span class="org-keyword">namespace</span> <span class="org-constant">std</span>;

<span class="org-type">bool</span> <span class="org-function-name">is_prime</span>(<span class="org-type">int</span> <span class="org-variable-name">x</span>) {
  <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">i</span> = 2; i &lt; x; ++i) {
    <span class="org-keyword">if</span> (x % i == 0) {
      <span class="org-keyword">return</span> <span class="org-constant">false</span>;
    }
  }
  <span class="org-keyword">return</span> <span class="org-constant">true</span>;
}

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
  <span class="org-type">int</span> <span class="org-variable-name">x</span> = 254436;
  <span class="org-type">vector</span>&lt;<span class="org-type">int</span>&gt; <span class="org-variable-name">res</span>;

  <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">i</span> = 2; i &lt;= x; ++i) {
    <span class="org-keyword">if</span> (x % i == 0 &amp;&amp; is_prime(i)) {
      res.push_back(i);
    }
  }

  <span class="org-keyword">for</span> (<span class="org-keyword">auto</span> &amp;<span class="org-variable-name">i</span> : res) cout &lt;&lt; i &lt;&lt; <span class="org-string">" "</span>;
  cout &lt;&lt; endl;
}
</pre>
</div>

<pre class="example">
2 3 7 13 233
</pre></li>
<li><b>Less Naive</b>: Only try primes upto x.</li>
<li><p>
<b>Least Naive</b>: you can't have two primes larger than <code>sqrt(x)</code>. So you only have to check upto <code>sqrt(x)</code>, then you can conclude that \(x\) is prime iff it has no other prime factors.
</p>
<div class="org-src-container">
<pre class="src src-cpp"><span class="org-preprocessor">#include</span><span class="org-string">&lt;iostream&gt;</span>
<span class="org-preprocessor">#include</span><span class="org-string">&lt;vector&gt;</span>
<span class="org-preprocessor">#include</span><span class="org-string">&lt;cmath&gt;</span>

<span class="org-keyword">using</span> <span class="org-keyword">namespace</span> <span class="org-constant">std</span>;

<span class="org-type">bool</span> <span class="org-function-name">is_prime</span>(<span class="org-type">int</span> <span class="org-variable-name">x</span>) {
  <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">i</span> = 2; i &lt;= sqrt(x); ++i) {
    <span class="org-keyword">if</span> (x % i == 0) {
      <span class="org-keyword">return</span> <span class="org-constant">false</span>;
    }
  }
  <span class="org-keyword">return</span> <span class="org-constant">true</span>;
}

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
  <span class="org-type">int</span> <span class="org-variable-name">x</span> = 254436;
  <span class="org-type">vector</span>&lt;<span class="org-type">int</span>&gt; <span class="org-variable-name">res</span>;

  <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">i</span> = 2; i &lt;= x; ++i) {
    <span class="org-keyword">if</span> (x % i == 0 &amp;&amp; is_prime(i)) {
      res.push_back(i);
    }
  }

  <span class="org-keyword">for</span> (<span class="org-keyword">auto</span> &amp;<span class="org-variable-name">i</span> : res) cout &lt;&lt; i &lt;&lt; <span class="org-string">" "</span>;
  cout &lt;&lt; endl;
}
</pre>
</div>

<pre class="example">
2 3 7 13 233
</pre></li>
</ul>
</div>
</div>

<div id="outline-container-org18220b3" class="outline-3">
<h3 id="org18220b3"><span class="section-number-3">2.2.</span> Divisor Finding</h3>
<div class="outline-text-3" id="text-2-2">
<ul class="org-ul">
<li>Similar to finding prime factors, but find all divisors of x.</li>
<li>If you know \(y\) is a divisor of x, then \(x/y\) is a divisor too.</li>
<li><p>
Only have to check up to <code>sqrt(x)</code>, the rest will be found as \(x/y\) (\(O(sqrt(n)\))
</p>
<div class="org-src-container">
<pre class="src src-cpp"><span class="org-preprocessor">#include</span><span class="org-string">&lt;iostream&gt;</span>
<span class="org-preprocessor">#include</span><span class="org-string">&lt;set&gt;</span>
<span class="org-preprocessor">#include</span><span class="org-string">&lt;cmath&gt;</span>

<span class="org-keyword">using</span> <span class="org-keyword">namespace</span> <span class="org-constant">std</span>;

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
  <span class="org-type">int</span> <span class="org-variable-name">x</span> = 27;
  <span class="org-type">set</span>&lt;<span class="org-type">int</span>&gt; <span class="org-variable-name">div_sqrtn</span>;

  <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">i</span> = 2; i &lt; sqrt(x); ++i) {
    <span class="org-keyword">if</span> (x % i == 0) {
      div_sqrtn.insert(i);
      div_sqrtn.insert(x / i);
    }
  }

  <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-keyword">const</span> &amp;<span class="org-variable-name">i</span> : div_sqrtn) {
    cout &lt;&lt; i &lt;&lt; <span class="org-string">" "</span>;
  }
  cout &lt;&lt; endl;
}
</pre>
</div>

<pre class="example">
3 9 
</pre></li>
</ul>
</div>
</div>

<div id="outline-container-orgb021661" class="outline-3">
<h3 id="orgb021661"><span class="section-number-3">2.3.</span> <span class="todo TODO">TODO</span> Sieve of Eratosthenes</h3>
</div>
<div id="outline-container-org2cd1283" class="outline-3">
<h3 id="org2cd1283"><span class="section-number-3">2.4.</span> <span class="todo TODO">TODO</span> Segmented Sieve of Eratosthenes</h3>
</div>
</div>
<div id="outline-container-orgff092c1" class="outline-2">
<h2 id="orgff092c1"><span class="section-number-2">3.</span> <span class="todo TODO">TODO</span> Euler Totient Theorem</h2>
</div>
<div id="outline-container-org852211e" class="outline-2">
<h2 id="org852211e"><span class="section-number-2">4.</span> <span class="todo TODO">TODO</span> Fermatâ€™s Theorem* TODO HCF &amp; LCM (Euclid)</h2>
<div class="outline-text-2" id="text-4">
</div>
<div id="outline-container-org983aceb" class="outline-3">
<h3 id="org983aceb"><span class="section-number-3">4.1.</span> GCD (Greatest Common Divisor)</h3>
<div class="outline-text-3" id="text-4-1">
<ul class="org-ul">
<li>gcd(x,y) = largest g where g | x and g | y</li>
<li>if x = p<sub>1</sub><sup>a</sup> * p<sub>2</sub><sup>b</sup>&#x2026; and y = p<sub>1</sub><sup>c</sup> * p<sub>2</sub><sup>d</sup>&#x2026;, then gcd(x,y) = p<sub>1</sub><sup>min(a,c)</sup> * p<sub>2</sub><sup>min(b,d)</sup>&#x2026;</li>
<li>Uses the <a href="#org311ac65">Euclidean algorithm</a></li>
<li>gcd(a,b,c, &#x2026;) = gcd(gcd(a,b), c, &#x2026;)</li>
</ul>
</div>
</div>

<div id="outline-container-org311ac65" class="outline-3">
<h3 id="org311ac65"><span class="section-number-3">4.2.</span> Extended Euclidean</h3>
<div class="outline-text-3" id="text-4-2">
<ul class="org-ul">
<li>gcd(a,b) = gcd(a - b, b). Given a &gt;= b, if not swap them
<ul class="org-ul">
<li>Let the GCD be g, then g | a and g | b, so a % g = 0 and b % g = 0</li>
<li>(a-b) % g = ((a % g) - (b % g)) % g = 0, so g | (a - b)</li>
</ul></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgc0f9b1b" class="outline-2">
<h2 id="orgc0f9b1b"><span class="section-number-2">5.</span> <span class="todo TODO">TODO</span> Linear Diophantine Equations (Extended Euclid)</h2>
</div>
<div id="outline-container-orgf404aa6" class="outline-2">
<h2 id="orgf404aa6"><span class="section-number-2">6.</span> <span class="todo TODO">TODO</span> Modulus Arithmetic (addition,multiplication,subtraction,modular Inverse)</h2>
<div class="outline-text-2" id="text-6">
</div>
<div id="outline-container-org8979c96" class="outline-3">
<h3 id="org8979c96"><span class="section-number-3">6.1.</span> Modulo Arithmetic</h3>
<div class="outline-text-3" id="text-6-1">
<ul class="org-ul">
<li>% gives the remainder of the division operation between x and y.</li>
<li><code>x % y</code> subtracts y from x until x becomes smallert than y, after which, x (when smaller than y) is the result of this expression.</li>
<li>For positive numbers, you subtract till it becomes smaller. For negative numbers you add y till it becomes larger.</li>
<li>17 % 6 =  (\(17 - 6 - 6\)) = 5</li>
<li>-15 % 6 = (\(-15 + 6 + 6 + 6\)) = 3</li>
<li><code>0 &lt;= (x % m) &lt; m</code></li>
<li><b>Another representation</b>: \(x = am + b\) [a, b are integers; 0 &lt;= b &lt; m]</li>
<li>Since [am] is a multiple of m, we just drop it when modding.</li>
<li>Since \(0 <= b < m\), it doesn't change when modding</li>
<li>So am + b % m = b</li>
<li>17 % 6 =  (\(2 * 6 + 5\)) = 5</li>
<li>-15 % 6 = (\(-3 * 6 + 3\)) = 3</li>
<li>C++ gives -15 % 6 as -3 but it should be 3&#x2026; be careful</li>
</ul>
</div>
</div>

<div id="outline-container-org9778e02" class="outline-3">
<h3 id="org9778e02"><span class="section-number-3">6.2.</span> Proofs</h3>
<div class="outline-text-3" id="text-6-2">
<ul class="org-ul">
<li>(a + b) % m = ((a % m) + (b % m)) % m</li>
<li>(a - b) % m = ((a % m) - (b % m)) % m</li>
<li>(a * b) % m = ((a % m) * (b % m)) % m</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-orge6879b7" class="outline-2">
<h2 id="orge6879b7"><span class="section-number-2">7.</span> <span class="todo TODO">TODO</span> Cycle Finding (Floyd Algo and Brent Algo)</h2>
</div>
<div id="outline-container-org490999e" class="outline-2">
<h2 id="org490999e"><span class="section-number-2">8.</span> <span class="todo TODO">TODO</span> Integer Factorization (Trial Division , Pollard Rho method) &#x2013;&gt; colorado.edu A Quick Tutorial on Pollard's Rho Algorithm</h2>
</div>
<div id="outline-container-org0441bf2" class="outline-2">
<h2 id="org0441bf2"><span class="section-number-2">9.</span> <span class="todo TODO">TODO</span> Lucas Theorem (Simple &amp; Advance)</h2>
</div>
<div id="outline-container-org0fbadf9" class="outline-2">
<h2 id="org0fbadf9"><span class="section-number-2">10.</span> <span class="todo TODO">TODO</span> Chinese Remainder Theorem</h2>
</div>
<div id="outline-container-orge7cfce2" class="outline-2">
<h2 id="orge7cfce2"><span class="section-number-2">11.</span> <span class="todo TODO">TODO</span> Wilson Theorem</h2>
</div>
<div id="outline-container-org864b186" class="outline-2">
<h2 id="org864b186"><span class="section-number-2">12.</span> <span class="todo TODO">TODO</span> Miller - Rabin Primality Testing</h2>
</div>
<div id="outline-container-orgf0bf526" class="outline-2">
<h2 id="orgf0bf526"><span class="section-number-2">13.</span> <span class="todo TODO">TODO</span> Perfect Numbers</h2>
</div>
<div id="outline-container-org6041946" class="outline-2">
<h2 id="org6041946"><span class="section-number-2">14.</span> <span class="todo TODO">TODO</span> Goldbach Conjecture</h2>
</div>

<div id="outline-container-orgf19f8e2" class="outline-2">
<h2 id="orgf19f8e2"><span class="section-number-2">15.</span> Floor/Ceil</h2>
<div class="outline-text-2" id="text-15">
<p>
<b>Floor</b> is just a number rounded down to the nearest int (left on the number line).
</p>

<p>
\[ \lfloor2\rfloor = 2 \]
\[ \lfloor2.1\rfloor = 2 \]
\[ \lfloor2.9\rfloor = 2 \]
</p>

<p>
<b>Ceil</b> is a number rounded up to the nearest int (right on the number line).
</p>

<p>
\[ \lceil2\rceil = 2 \]
\[ \lceil2.1\rceil = 3 \]
\[ \lceil2.9\rceil = 3 \]
</p>
</div>
</div>

<div id="outline-container-org569e436" class="outline-2">
<h2 id="org569e436"><span class="section-number-2">16.</span> Divisors</h2>
<div class="outline-text-2" id="text-16">
<ul class="org-ul">
<li>\(a | b\) &harr; "a divides b" &harr; "b is divisible by a" &harr; b % a = 0</li>
<li>Divisor (or factor) of x: a number y where \(y | x\)</li>
<li>Transitive: \(a | b, b | c \rightarrow a | c\)</li>
<li>Prime: no divisors except 1 and itself</li>
</ul>
</div>
</div>

<div id="outline-container-org483d313" class="outline-2">
<h2 id="org483d313"><span class="section-number-2">17.</span> <span class="todo TODO">TODO</span> Binary Exponentiation</h2>
<div class="outline-text-2" id="text-17">
<p>
gotta read more about this in future.
Compute \(a^b\) % \(m\) for large numbers quickly.
</p>

<ul class="org-ul">
<li>Write b in binary, ex: 21 -&gt; 10101</li>
<li>So \(a^21 = a^1 * a^4 * a^16\)</li>
<li>\(a^2x = a^x * a^x\), so we can compute \(a^1\), \(a^2\), \(a^4\), \(a^8\), etc in O(1) each</li>
<li>Take module with each multiplication</li>
<li>Total complexit: O(log{b})</li>
</ul>
</div>
</div>

<div id="outline-container-orgd3b4eda" class="outline-2">
<h2 id="orgd3b4eda"><span class="section-number-2">18.</span> <span class="todo TODO">TODO</span> Modular "division"</h2>
<div class="outline-text-2" id="text-18">
<p>
I don't understand this rn
</p>
</div>
</div>
<div id="outline-container-orgda0160f" class="outline-2">
<h2 id="orgda0160f"><span class="section-number-2">19.</span> Instance of Mobius</h2>
</div>
</div>
</body>
</html>
