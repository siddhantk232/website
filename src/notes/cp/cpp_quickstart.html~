<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2022-09-05 Mon 22:46 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>CPP (for CP)</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="siddhant" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<h1 class="title">CPP (for CP)</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org0c8e540">1. CPP (for CP)</a></li>
<li><a href="#org63ae43c">2. Tips</a></li>
<li><a href="#org06f7a8f">3. Basic data types</a>
<ul>
<li><a href="#org884e531">3.1. Ranges (rough estimation)</a></li>
<li><a href="#org34e5410">3.2. Calculation precedence (increasing -&gt; decreasing)</a></li>
<li><a href="#orgfa2cf81">3.3. Operator precedence and associativity</a></li>
</ul>
</li>
<li><a href="#org4651c50">4. CPP References</a></li>
<li><a href="#orgcdeba81">5. Short long long double</a></li>
</ul>
</div>
</div>

<div id="outline-container-org0c8e540" class="outline-2">
<h2 id="org0c8e540"><span class="section-number-2">1</span> CPP (for CP)</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>Basic syntax and prior C knowledge is assumed</li>
</ul>
</div>
</div>

<div id="outline-container-org63ae43c" class="outline-2">
<h2 id="org63ae43c"><span class="section-number-2">2</span> Tips</h2>
<div class="outline-text-2" id="text-2">
<p>
include <code>bits/stdc++.h</code> can save time including specific header files.
</p>
</div>
</div>

<div id="outline-container-org06f7a8f" class="outline-2">
<h2 id="org06f7a8f"><span class="section-number-2">3</span> Basic data types</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>data types (int, char, float, double, bool)</li>
<li>long int and long long int</li>
<li>Size of data types:</li>
</ul>

<div class="org-src-container">
<pre class="src src-cpp"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;iostream&gt;</span>

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">a</span>;
    <span style="font-weight: bold; text-decoration: underline;">long</span> <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">b</span>;
    <span style="font-weight: bold; text-decoration: underline;">long</span> <span style="font-weight: bold; text-decoration: underline;">long</span> <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">c</span>;
    <span style="font-weight: bold; text-decoration: underline;">std</span>::cout &lt;&lt; <span style="font-weight: bold;">sizeof</span>(a) &lt;&lt; <span style="font-weight: bold; text-decoration: underline;">std</span>::endl;
    <span style="font-weight: bold; text-decoration: underline;">std</span>::cout &lt;&lt; <span style="font-weight: bold;">sizeof</span>(b) &lt;&lt; <span style="font-weight: bold; text-decoration: underline;">std</span>::endl;
    <span style="font-weight: bold; text-decoration: underline;">std</span>::cout &lt;&lt; <span style="font-weight: bold;">sizeof</span>(c) &lt;&lt; <span style="font-weight: bold; text-decoration: underline;">std</span>::endl;
}
</pre>
</div>

<ul class="org-ul">
<li><code>std::string</code> for working with strings in cpp gives trivial features like
concat (+), comparison (==) and, <code>size()</code> etc.
<ul class="org-ul">
<li><code>std::getline(istream, str)</code> can be used to get a single line input</li>
</ul></li>

<li>Use arrays for storing collection of items of same data type.
<ul class="org-ul">
<li>Array size is limited.</li>
<li>For CP, local array size shouldn't be more than 10<sup>5</sup> ~int arr[1e5].</li>
</ul></li>
</ul>
</div>

<div id="outline-container-org884e531" class="outline-3">
<h3 id="org884e531"><span class="section-number-3">3.1</span> Ranges (rough estimation)</h3>
<div class="outline-text-3" id="text-3-1">
<ul class="org-ul">
<li>-10<sup>9</sup> &lt; int &lt; 10<sup>9</sup></li>
<li>-10<sup>12</sup> &lt; long int &lt; 10<sup>12</sup></li>
<li>-10<sup>18</sup> &lt; long long int &lt; 10<sup>18</sup></li>
<li>header file <code>climits</code> has accurate declared limits</li>
<li>sizeof double is higher than long int but it's not used where precise
calculation is required.</li>
</ul>

<div class="org-src-container">
<pre class="src src-cpp"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;iostream&gt;</span>
<span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;climits&gt;</span>

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
    <span style="font-weight: bold; text-decoration: underline;">std</span>::cout &lt;&lt; INT_MIN &lt;&lt; <span style="font-style: italic;">" &lt; int &lt; "</span> &lt;&lt; INT_MAX &lt;&lt; <span style="font-weight: bold; text-decoration: underline;">std</span>::endl;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-org34e5410" class="outline-3">
<h3 id="org34e5410"><span class="section-number-3">3.2</span> Calculation precedence (increasing -&gt; decreasing)</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Types lower in this list will be converted to higher data types in expressions
and outputs.
</p>

<ul class="org-ul">
<li>double</li>
<li>float</li>
<li>long long int</li>
<li>long int</li>
<li>int</li>
<li>char</li>
</ul>

<div class="org-src-container">
<pre class="src src-cpp"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;iostream&gt;</span>

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
    <span style="font-weight: bold; text-decoration: underline;">std</span>::cout &lt;&lt; 7 / 2 &lt;&lt; <span style="font-weight: bold; text-decoration: underline;">std</span>::endl; <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">outputs int</span>
    <span style="font-weight: bold; text-decoration: underline;">std</span>::cout &lt;&lt; 7 / 2.0 &lt;&lt; <span style="font-weight: bold; text-decoration: underline;">std</span>::endl; <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">outputs float</span>
    <span style="font-weight: bold; text-decoration: underline;">std</span>::cout &lt;&lt; <span style="font-style: italic;">'a'</span> + 1 &lt;&lt; <span style="font-weight: bold; text-decoration: underline;">std</span>::endl; <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">outputs int (ascii values)</span>
}
</pre>
</div>
</div>
</div>



<div id="outline-container-orgfa2cf81" class="outline-3">
<h3 id="orgfa2cf81"><span class="section-number-3">3.3</span> Operator precedence and associativity</h3>
<div class="outline-text-3" id="text-3-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">Category</td>
<td class="org-left">Operator</td>
<td class="org-left">Associativity</td>
</tr>

<tr>
<td class="org-left">Postfix</td>
<td class="org-left">() [] -&gt; . ++ - -</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Unary</td>
<td class="org-left">+ - ! ~ ++ - - (type)* &amp; sizeof</td>
<td class="org-left">Right to left</td>
</tr>

<tr>
<td class="org-left">Multiplicative</td>
<td class="org-left">* / %</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Additive</td>
<td class="org-left">+ -</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Shift</td>
<td class="org-left">&lt;&lt; &gt;&gt;</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Relational</td>
<td class="org-left">&lt; &lt;= &gt; &gt;=</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Equality</td>
<td class="org-left"><code>= !</code></td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Bitwise AND</td>
<td class="org-left">&amp;</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Bitwise XOR</td>
<td class="org-left">^</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Bitwise OR</td>
<td class="org-left">&vert;</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Logical AND</td>
<td class="org-left">&amp;&amp;</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Logical OR</td>
<td class="org-left">&vert;&vert;</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Conditional</td>
<td class="org-left">?:</td>
<td class="org-left">Right to left</td>
</tr>

<tr>
<td class="org-left">Assignment</td>
<td class="org-left">= += -= *= /= %= &gt;&gt;= &lt;&lt;= &amp;= ^= &vert;=</td>
<td class="org-left">Right to left</td>
</tr>

<tr>
<td class="org-left">Comma</td>
<td class="org-left">,</td>
<td class="org-left">Left to right</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-org4651c50" class="outline-2">
<h2 id="org4651c50"><span class="section-number-2">4</span> CPP References</h2>
<div class="outline-text-2" id="text-4">
<p>
References can be used to ignore variable copying when calling functions. This
does not require any use of pointers.
</p>

<p>
Example:
</p>

<div class="org-src-container">
<pre class="src src-cpp"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;iostream&gt;</span>

<span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">swap takes in references a and b</span>
<span style="font-weight: bold; text-decoration: underline;">void</span> <span style="font-weight: bold;">swap</span>(<span style="font-weight: bold; text-decoration: underline;">int</span> &amp;<span style="font-weight: bold; font-style: italic;">a</span>, <span style="font-weight: bold; text-decoration: underline;">int</span> &amp;<span style="font-weight: bold; font-style: italic;">b</span>) {
    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">temp</span> = a;
    a = b;
    b = temp;
}

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span>() {
    <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">a</span> = 4, <span style="font-weight: bold; font-style: italic;">b</span> = 3;
    <span style="font-weight: bold; text-decoration: underline;">std</span>::cout &lt;&lt; a &lt;&lt; <span style="font-style: italic;">" "</span> &lt;&lt; b &lt;&lt; <span style="font-weight: bold; text-decoration: underline;">std</span>::endl;
    <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">this utility function is already declared in &lt;algorithm&gt; header file</span>
    swap(a,b);
    <span style="font-weight: bold; text-decoration: underline;">std</span>::cout &lt;&lt; a &lt;&lt; <span style="font-style: italic;">" "</span> &lt;&lt; b &lt;&lt; <span style="font-weight: bold; text-decoration: underline;">std</span>::endl;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgcdeba81" class="outline-2">
<h2 id="orgcdeba81"><span class="section-number-2">5</span> Short long long double</h2>
<div class="outline-text-2" id="text-5">
<div class="org-src-container">
<pre class="src src-cpp"><span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;iostream&gt;</span>
<span style="font-weight: bold;">#include</span> <span style="font-style: italic;">&lt;climits&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="font-weight: bold; text-decoration: underline;">std</span>;

<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold;">main</span> () {
    cout &lt;&lt; <span style="font-weight: bold;">sizeof</span>(<span style="font-weight: bold; text-decoration: underline;">int</span>) &lt;&lt; endl;
    cout &lt;&lt; <span style="font-weight: bold;">sizeof</span>(<span style="font-weight: bold; text-decoration: underline;">char</span>) &lt;&lt; endl;
    cout &lt;&lt; <span style="font-weight: bold;">sizeof</span>(<span style="font-weight: bold; text-decoration: underline;">float</span>) &lt;&lt; endl;
    cout &lt;&lt; <span style="font-weight: bold;">sizeof</span>(<span style="font-weight: bold; text-decoration: underline;">double</span>) &lt;&lt; endl;

    <span style="font-weight: bold; text-decoration: underline;">short</span> <span style="font-weight: bold; font-style: italic;">a</span> = 3;
    <span style="font-weight: bold; text-decoration: underline;">long</span> <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">b</span> = 69;
    <span style="font-weight: bold; text-decoration: underline;">long</span> <span style="font-weight: bold; text-decoration: underline;">long</span> <span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">c</span> = 69;
    <span style="font-weight: bold; text-decoration: underline;">long</span> <span style="font-weight: bold; text-decoration: underline;">double</span> <span style="font-weight: bold; font-style: italic;">d</span> = 2.0;

    cout &lt;&lt; a &lt;&lt; endl;
    cout &lt;&lt; <span style="font-weight: bold;">sizeof</span>(a) &lt;&lt; endl;
    cout &lt;&lt; <span style="font-weight: bold;">sizeof</span>(b) &lt;&lt; endl;
    cout &lt;&lt; <span style="font-weight: bold;">sizeof</span>(c) &lt;&lt; endl;
    cout &lt;&lt; <span style="font-weight: bold;">sizeof</span>(d) &lt;&lt; endl;
}
</pre>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Author: siddhant</p>
<p class="date">Created: 2022-09-05 Mon 22:46</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
