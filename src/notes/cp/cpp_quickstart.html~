<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>CPP (for CP)</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
</head>
<body>
<div id="content" class="content">
<h1 class="title">CPP (for CP)</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org2ed1ecd">1. CPP (for CP)</a></li>
<li><a href="#orga3d7c74">2. Tips</a></li>
<li><a href="#org13944f2">3. Basic data types</a>
<ul>
<li><a href="#orga5b4a04">3.1. Ranges (rough estimation)</a></li>
<li><a href="#org0425513">3.2. Calculation precedence (increasing -&gt; decreasing)</a></li>
<li><a href="#org859d4c3">3.3. Operator precedence and associativity</a></li>
</ul>
</li>
<li><a href="#org43bd453">4. CPP References</a></li>
<li><a href="#orgce2af0a">5. Short long long double</a></li>
</ul>
</div>
</div>

<div id="outline-container-org2ed1ecd" class="outline-2">
<h2 id="org2ed1ecd"><span class="section-number-2">1.</span> CPP (for CP)</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>Basic syntax and prior C knowledge is assumed</li>
</ul>
</div>
</div>

<div id="outline-container-orga3d7c74" class="outline-2">
<h2 id="orga3d7c74"><span class="section-number-2">2.</span> Tips</h2>
<div class="outline-text-2" id="text-2">
<p>
include <code>bits/stdc++.h</code> can save time including specific header files.
</p>
</div>
</div>

<div id="outline-container-org13944f2" class="outline-2">
<h2 id="org13944f2"><span class="section-number-2">3.</span> Basic data types</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>data types (int, char, float, double, bool)</li>
<li>long int and long long int</li>
<li>Size of data types:</li>
</ul>

<div class="org-src-container">
<pre class="src src-cpp"><span class="org-preprocessor">#include</span> <span class="org-string">&lt;iostream&gt;</span>

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
    <span class="org-type">int</span> <span class="org-variable-name">a</span>;
    <span class="org-type">long</span> <span class="org-type">int</span> <span class="org-variable-name">b</span>;
    <span class="org-type">long</span> <span class="org-type">long</span> <span class="org-type">int</span> <span class="org-variable-name">c</span>;
    <span class="org-constant">std</span>::cout &lt;&lt; <span class="org-keyword">sizeof</span>(a) &lt;&lt; <span class="org-constant">std</span>::endl;
    <span class="org-constant">std</span>::cout &lt;&lt; <span class="org-keyword">sizeof</span>(b) &lt;&lt; <span class="org-constant">std</span>::endl;
    <span class="org-constant">std</span>::cout &lt;&lt; <span class="org-keyword">sizeof</span>(c) &lt;&lt; <span class="org-constant">std</span>::endl;
}
</pre>
</div>

<ul class="org-ul">
<li><code>std::string</code> for working with strings in cpp gives trivial features like
concat (+), comparison (==) and, <code>size()</code> etc.
<ul class="org-ul">
<li><code>std::getline(istream, str)</code> can be used to get a single line input</li>
</ul></li>

<li>Use arrays for storing collection of items of same data type.
<ul class="org-ul">
<li>Array size is limited.</li>
<li>For CP, local array size shouldn't be more than 10<sup>5</sup> ~int arr[1e5].</li>
</ul></li>
</ul>
</div>

<div id="outline-container-orga5b4a04" class="outline-3">
<h3 id="orga5b4a04"><span class="section-number-3">3.1.</span> Ranges (rough estimation)</h3>
<div class="outline-text-3" id="text-3-1">
<ul class="org-ul">
<li>-10<sup>9</sup> &lt; int &lt; 10<sup>9</sup></li>
<li>-10<sup>12</sup> &lt; long int &lt; 10<sup>12</sup></li>
<li>-10<sup>18</sup> &lt; long long int &lt; 10<sup>18</sup></li>
<li>header file <code>climits</code> has accurate declared limits</li>
<li>sizeof double is higher than long int but it's not used where precise
calculation is required.</li>
</ul>

<div class="org-src-container">
<pre class="src src-cpp"><span class="org-preprocessor">#include</span> <span class="org-string">&lt;iostream&gt;</span>
<span class="org-preprocessor">#include</span> <span class="org-string">&lt;climits&gt;</span>

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
    <span class="org-constant">std</span>::cout &lt;&lt; INT_MIN &lt;&lt; <span class="org-string">" &lt; int &lt; "</span> &lt;&lt; INT_MAX &lt;&lt; <span class="org-constant">std</span>::endl;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-org0425513" class="outline-3">
<h3 id="org0425513"><span class="section-number-3">3.2.</span> Calculation precedence (increasing -&gt; decreasing)</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Types lower in this list will be converted to higher data types in expressions
and outputs.
</p>

<ul class="org-ul">
<li>double</li>
<li>float</li>
<li>long long int</li>
<li>long int</li>
<li>int</li>
<li>char</li>
</ul>

<div class="org-src-container">
<pre class="src src-cpp"><span class="org-preprocessor">#include</span> <span class="org-string">&lt;iostream&gt;</span>

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
    <span class="org-constant">std</span>::cout &lt;&lt; 7 / 2 &lt;&lt; <span class="org-constant">std</span>::endl; <span class="org-comment-delimiter">// </span><span class="org-comment">outputs int</span>
    <span class="org-constant">std</span>::cout &lt;&lt; 7 / 2.0 &lt;&lt; <span class="org-constant">std</span>::endl; <span class="org-comment-delimiter">// </span><span class="org-comment">outputs float</span>
    <span class="org-constant">std</span>::cout &lt;&lt; <span class="org-string">'a'</span> + 1 &lt;&lt; <span class="org-constant">std</span>::endl; <span class="org-comment-delimiter">// </span><span class="org-comment">outputs int (ascii values)</span>
}
</pre>
</div>
</div>
</div>



<div id="outline-container-org859d4c3" class="outline-3">
<h3 id="org859d4c3"><span class="section-number-3">3.3.</span> Operator precedence and associativity</h3>
<div class="outline-text-3" id="text-3-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">Category</td>
<td class="org-left">Operator</td>
<td class="org-left">Associativity</td>
</tr>

<tr>
<td class="org-left">Postfix</td>
<td class="org-left">() [] -&gt; . ++ - -</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Unary</td>
<td class="org-left">+ - ! ~ ++ - - (type)* &amp; sizeof</td>
<td class="org-left">Right to left</td>
</tr>

<tr>
<td class="org-left">Multiplicative</td>
<td class="org-left">* / %</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Additive</td>
<td class="org-left">+ -</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Shift</td>
<td class="org-left">&lt;&lt; &gt;&gt;</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Relational</td>
<td class="org-left">&lt; &lt;= &gt; &gt;=</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Equality</td>
<td class="org-left"><code>= !</code></td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Bitwise AND</td>
<td class="org-left">&amp;</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Bitwise XOR</td>
<td class="org-left">^</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Bitwise OR</td>
<td class="org-left">&vert;</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Logical AND</td>
<td class="org-left">&amp;&amp;</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Logical OR</td>
<td class="org-left">&vert;&vert;</td>
<td class="org-left">Left to right</td>
</tr>

<tr>
<td class="org-left">Conditional</td>
<td class="org-left">?:</td>
<td class="org-left">Right to left</td>
</tr>

<tr>
<td class="org-left">Assignment</td>
<td class="org-left">= += -= *= /= %= &gt;&gt;= &lt;&lt;= &amp;= ^= &vert;=</td>
<td class="org-left">Right to left</td>
</tr>

<tr>
<td class="org-left">Comma</td>
<td class="org-left">,</td>
<td class="org-left">Left to right</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-org43bd453" class="outline-2">
<h2 id="org43bd453"><span class="section-number-2">4.</span> CPP References</h2>
<div class="outline-text-2" id="text-4">
<p>
References can be used to ignore variable copying when calling functions. This
does not require any use of pointers.
</p>

<p>
Example:
</p>

<div class="org-src-container">
<pre class="src src-cpp"><span class="org-preprocessor">#include</span> <span class="org-string">&lt;iostream&gt;</span>

<span class="org-comment-delimiter">// </span><span class="org-comment">swap takes in references a and b</span>
<span class="org-type">void</span> <span class="org-function-name">swap</span>(<span class="org-type">int</span> &amp;<span class="org-variable-name">a</span>, <span class="org-type">int</span> &amp;<span class="org-variable-name">b</span>) {
    <span class="org-type">int</span> <span class="org-variable-name">temp</span> = a;
    a = b;
    b = temp;
}

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
    <span class="org-type">int</span> <span class="org-variable-name">a</span> = 4, <span class="org-variable-name">b</span> = 3;
    <span class="org-constant">std</span>::cout &lt;&lt; a &lt;&lt; <span class="org-string">" "</span> &lt;&lt; b &lt;&lt; <span class="org-constant">std</span>::endl;
    <span class="org-comment-delimiter">// </span><span class="org-comment">this utility function is already declared in &lt;algorithm&gt; header file</span>
    swap(a,b);
    <span class="org-constant">std</span>::cout &lt;&lt; a &lt;&lt; <span class="org-string">" "</span> &lt;&lt; b &lt;&lt; <span class="org-constant">std</span>::endl;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgce2af0a" class="outline-2">
<h2 id="orgce2af0a"><span class="section-number-2">5.</span> Short long long double</h2>
<div class="outline-text-2" id="text-5">
<div class="org-src-container">
<pre class="src src-cpp"><span class="org-preprocessor">#include</span> <span class="org-string">&lt;iostream&gt;</span>
<span class="org-preprocessor">#include</span> <span class="org-string">&lt;climits&gt;</span>

<span class="org-keyword">using</span> <span class="org-keyword">namespace</span> <span class="org-constant">std</span>;

<span class="org-type">int</span> <span class="org-function-name">main</span> () {
    cout &lt;&lt; <span class="org-keyword">sizeof</span>(<span class="org-type">int</span>) &lt;&lt; endl;
    cout &lt;&lt; <span class="org-keyword">sizeof</span>(<span class="org-type">char</span>) &lt;&lt; endl;
    cout &lt;&lt; <span class="org-keyword">sizeof</span>(<span class="org-type">float</span>) &lt;&lt; endl;
    cout &lt;&lt; <span class="org-keyword">sizeof</span>(<span class="org-type">double</span>) &lt;&lt; endl;

    <span class="org-type">short</span> <span class="org-variable-name">a</span> = 3;
    <span class="org-type">long</span> <span class="org-type">int</span> <span class="org-variable-name">b</span> = 69;
    <span class="org-type">long</span> <span class="org-type">long</span> <span class="org-type">int</span> <span class="org-variable-name">c</span> = 69;
    <span class="org-type">long</span> <span class="org-type">double</span> <span class="org-variable-name">d</span> = 2.0;

    cout &lt;&lt; a &lt;&lt; endl;
    cout &lt;&lt; <span class="org-keyword">sizeof</span>(a) &lt;&lt; endl;
    cout &lt;&lt; <span class="org-keyword">sizeof</span>(b) &lt;&lt; endl;
    cout &lt;&lt; <span class="org-keyword">sizeof</span>(c) &lt;&lt; endl;
    cout &lt;&lt; <span class="org-keyword">sizeof</span>(d) &lt;&lt; endl;
}
</pre>
</div>
</div>
</div>
</div>
</body>
</html>
