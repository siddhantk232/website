<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2022-11-06 Sun 20:39 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>&lrm;</title>
<meta name="author" content="siddhant" />
<meta name="generator" content="Org Mode" />
<style>
  #content { max-width: 60em; margin: auto; }
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #e6e6e6;
    border-radius: 3px;
    background-color: #f2f2f2;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
  }
  pre.src:before {
    display: none;
    position: absolute;
    top: -8px;
    right: 12px;
    padding: 3px;
    color: #555;
    background-color: #f2f2f299;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-authinfo::before { content: 'Authinfo'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { }
</style>
</head>
<body>
<div id="content" class="content">
<p>
(practical 11) <b>Aim</b>: WAP to demonstrate usage of copy constructor.
</p>

<div class="org-src-container">
<pre class="src src-cpp"><span class="org-preprocessor">#include</span><span class="org-string">&lt;iostream&gt;</span>

<span class="org-keyword">using</span> <span class="org-keyword">namespace</span> <span class="org-constant">std</span>;

<span class="org-keyword">class</span> <span class="org-type">Sample</span> {
  <span class="org-type">int</span> *<span class="org-variable-name">i</span>;
  <span class="org-type">int</span> <span class="org-variable-name">size</span>;

  <span class="org-keyword">public</span>:

  <span class="org-function-name">Sample</span>() {
    size = 3;
    i = <span class="org-keyword">new</span> <span class="org-type">int</span>[size];
    <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">y</span> = 0; y &lt; 3; ++y) {
      i[y] = y + 1;
    }
  }
  <span class="org-function-name">Sample</span>(<span class="org-type">int</span> <span class="org-variable-name">x</span>): <span class="org-function-name">size</span>(x) {
    i = <span class="org-keyword">new</span> <span class="org-type">int</span>[size];
    <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">y</span> = 0; y &lt; x; ++y) {
      i[y] = y * 2 + 1;
    }
  }

  <span class="org-function-name">Sample</span>(<span class="org-type">Sample</span> &amp;<span class="org-variable-name">ob</span>) {
    i = <span class="org-keyword">new</span> <span class="org-type">int</span>[ob.size];
    size = ob.size;
    <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">y</span> = 0; y &lt; size; ++y) {
      i[y] = ob.i[y];
    }
  }

  <span class="org-type">void</span> <span class="org-function-name">show_i</span>() {
    <span class="org-keyword">for</span> (<span class="org-type">int</span> <span class="org-variable-name">y</span> = 0; y &lt; size; ++y) {
      cout &lt;&lt; i[y] &lt;&lt; <span class="org-string">" "</span>;
    }
    cout &lt;&lt; endl;
  }
};

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
  <span class="org-type">Sample</span> <span class="org-variable-name">s1</span>;
  cout &lt;&lt; <span class="org-string">"s1: "</span>;
  s1.show_i();
  <span class="org-type">Sample</span> <span class="org-variable-name">s2</span>(3);
  cout &lt;&lt; <span class="org-string">"s2: "</span>;
  s2.show_i();
  <span class="org-type">Sample</span> <span class="org-variable-name">s3</span> = s2;
  cout &lt;&lt; <span class="org-string">"s3: "</span>;
  s3.show_i();
  <span class="org-type">Sample</span> <span class="org-variable-name">s4</span>(s3);
  cout &lt;&lt; <span class="org-string">"s4: "</span>;
  s4.show_i();
}
</pre>
</div>

<pre class="example">
s1: 1 2 3
s2: 1 3 5
s3: 1 3 5
s4: 1 3 5
</pre>


<p>
(practical 12) <b>Aim</b>: WAP to demonstrate <code>static</code> class attributes.
</p>

<div class="org-src-container">
<pre class="src src-cpp"><span class="org-preprocessor">#include</span><span class="org-string">&lt;iostream&gt;</span>

<span class="org-keyword">using</span> <span class="org-keyword">namespace</span> <span class="org-constant">std</span>;

<span class="org-keyword">class</span> <span class="org-type">Shared</span> {
  <span class="org-type">int</span> <span class="org-variable-name">a</span>;
  <span class="org-keyword">static</span> <span class="org-type">int</span> <span class="org-variable-name">b</span>;

<span class="org-keyword">public</span>:
  <span class="org-type">void</span> <span class="org-function-name">setData</span>(<span class="org-type">int</span> <span class="org-variable-name">i</span>, <span class="org-type">int</span> <span class="org-variable-name">j</span>) {
    a = i;
    b = j;
  }

  <span class="org-type">void</span> <span class="org-function-name">show</span>() {
    cout &lt;&lt; <span class="org-string">"non-static data member: "</span> &lt;&lt; a &lt;&lt; endl;
    cout &lt;&lt; <span class="org-string">"static data member: "</span> &lt;&lt; b &lt;&lt; endl;
  }
};

<span class="org-type">int</span> <span class="org-constant">Shared</span>::<span class="org-variable-name">b</span>;

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
  <span class="org-type">Shared</span> <span class="org-variable-name">s</span> = Shared();
  <span class="org-type">Shared</span> <span class="org-variable-name">x</span> = Shared();
  s.setData(19, 20);
  x.setData(29, 30);
  s.show();
  x.show();
}
</pre>
</div>

<pre class="example">
non-static data member: 19
static data member: 30
non-static data member: 29
static data member: 30
</pre>


<p>
(practical 13) <b>Aim</b>: WAP to count class instances.
</p>

<div class="org-src-container">
<pre class="src src-cpp"><span class="org-preprocessor">#include</span><span class="org-string">&lt;iostream&gt;</span>

<span class="org-keyword">using</span> <span class="org-keyword">namespace</span> <span class="org-constant">std</span>;

<span class="org-keyword">class</span> <span class="org-type">Count</span> {
  <span class="org-type">int</span> <span class="org-variable-name">id</span>;
  <span class="org-keyword">static</span> <span class="org-type">int</span> <span class="org-variable-name">count</span>;

<span class="org-keyword">public</span>:
  <span class="org-function-name">Count</span>() {
    id = count;
    count++;
  }

  ~<span class="org-function-name">Count</span>() {
    count--;
  }

  <span class="org-type">int</span> <span class="org-function-name">getId</span>() { <span class="org-keyword">return</span> id; };

  <span class="org-keyword">static</span> <span class="org-type">int</span> <span class="org-function-name">getCount</span>() { <span class="org-keyword">return</span> count; };
};

<span class="org-type">int</span> <span class="org-constant">Count</span>::<span class="org-variable-name">count</span> = 0;

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
  <span class="org-type">Count</span> *<span class="org-variable-name">a</span> = <span class="org-keyword">new</span> <span class="org-type">Count</span>();
  <span class="org-type">Count</span> *<span class="org-variable-name">b</span> = <span class="org-keyword">new</span> <span class="org-type">Count</span>();
  <span class="org-type">Count</span> *<span class="org-variable-name">c</span> = <span class="org-keyword">new</span> <span class="org-type">Count</span>();
  <span class="org-type">Count</span> *<span class="org-variable-name">d</span> = <span class="org-keyword">new</span> <span class="org-type">Count</span>();

  cout &lt;&lt; <span class="org-string">"Count class has "</span> &lt;&lt; <span class="org-constant">Count</span>::getCount() &lt;&lt; <span class="org-string">" instances"</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="org-string">"Class ids are:"</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="org-string">"a: "</span> &lt;&lt; a-&gt;getId() &lt;&lt; endl;
  cout &lt;&lt; <span class="org-string">"b: "</span> &lt;&lt; b-&gt;getId() &lt;&lt; endl;
  cout &lt;&lt; <span class="org-string">"c: "</span> &lt;&lt; c-&gt;getId() &lt;&lt; endl;
  cout &lt;&lt; <span class="org-string">"d: "</span> &lt;&lt; d-&gt;getId() &lt;&lt; endl;

  <span class="org-keyword">delete</span> b;

  cout &lt;&lt; <span class="org-string">"Count class has "</span> &lt;&lt; <span class="org-constant">Count</span>::getCount() &lt;&lt; <span class="org-string">" instances after deletion"</span> &lt;&lt; endl;

  <span class="org-keyword">delete</span> a;
  <span class="org-keyword">delete</span> c;
  <span class="org-keyword">delete</span> d;

  cout &lt;&lt; <span class="org-string">"Count class has "</span> &lt;&lt; <span class="org-constant">Count</span>::getCount() &lt;&lt; <span class="org-string">" instances after deleting all objects"</span> &lt;&lt; endl;
}
</pre>
</div>

<pre class="example">
Count class has 4 instances
Class ids are:
a: 0
b: 1
c: 2
d: 3
Count class has 3 instances after deletion
Count class has 0 instances after deleting all objects
</pre>


<p>
(practical 14) <b>Aim</b>: WAP to demonstrate lifetime of a static object in cpp.
</p>

<div class="org-src-container">
<pre class="src src-cpp"><span class="org-preprocessor">#include</span><span class="org-string">&lt;iostream&gt;</span>

<span class="org-keyword">using</span> <span class="org-keyword">namespace</span> <span class="org-constant">std</span>;

<span class="org-keyword">class</span> <span class="org-type">Sample</span> {
  <span class="org-type">int</span> <span class="org-variable-name">id</span>;
  <span class="org-keyword">static</span> <span class="org-type">int</span> <span class="org-variable-name">count</span>;
<span class="org-keyword">public</span>:
  <span class="org-function-name">Sample</span>() {
    id = count;
    count++;
    cout &lt;&lt; <span class="org-string">"constructor called. id: "</span> &lt;&lt; id &lt;&lt; endl;
  }
  ~<span class="org-function-name">Sample</span>() {
    cout &lt;&lt; <span class="org-string">"destructor called. id: "</span> &lt;&lt; id &lt;&lt; endl;
    count--;
  }
};

<span class="org-type">int</span> <span class="org-constant">Sample</span>::<span class="org-variable-name">count</span>;

<span class="org-type">void</span> <span class="org-function-name">f</span>() {
  <span class="org-keyword">static</span> <span class="org-type">Sample</span> <span class="org-variable-name">s1</span>;
}

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
  cout &lt;&lt; <span class="org-string">"main starts"</span> &lt;&lt; endl;
  <span class="org-type">Sample</span> <span class="org-variable-name">s0</span>;
  f();
  <span class="org-type">Sample</span> <span class="org-variable-name">s2</span>;
  cout &lt;&lt; <span class="org-string">"main ends"</span> &lt;&lt; endl;
}
</pre>
</div>

<pre class="example">
main starts
constructor called. id: 0
constructor called. id: 1
constructor called. id: 2
main ends
destructor called. id: 2
destructor called. id: 0
destructor called. id: 1
</pre>
</div>
</body>
</html>
